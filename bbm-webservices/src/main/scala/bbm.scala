// Generated by <a href="http://scalaxb.org/">scalaxb</a>.
package bbmanager

case class GetAllLeagues()


case class GetAllLeaguesResponse(GetAllLeaguesResult: Option[bbmanager.ArrayOfLeagueEntity])


case class ArrayOfLeagueEntity(LeagueEntity: Option[bbmanager.LeagueEntity]*)


case class LeagueEntity(Id: Int,
  Name: Option[String],
  DateCreated: javax.xml.datatype.XMLGregorianCalendar,
  CommissaireId: Int,
  CreatedByName: Option[String],
  Password: Option[String],
  Confidential: Boolean,
  NbMatchs: Int,
  NbTeams: Int,
  Url: Option[String],
  PointsSystemId: Int,
  IsMetaLeague: Boolean,
  AddVirtualTD: Boolean,
  Finished: Boolean,
  FTPFolder: Option[String],
  FTPLogin: Option[String],
  FTPPassword: Option[String],
  ImageHttp: Option[String])


case class GetTeamsInLeague(leagueId: Int)


case class GetTeamsInLeagueResponse(GetTeamsInLeagueResult: Option[bbmanager.ArrayOfString])


case class ArrayOfString(string: Option[String]*)


case class GetLeaguePlayers(leagueId: Int)


case class GetLeaguePlayersResponse(groupPlayers: Option[bbmanager.ArrayOfPlayerEntity],
  groupTeams: Option[bbmanager.ArrayOfTeamEntity])


case class ArrayOfPlayerEntity(PlayerEntity: Option[bbmanager.PlayerEntity]*)


case class PlayerEntity(playerentitysequence1: bbmanager.PlayerEntitySequence1,
  playerentitysequence2: bbmanager.PlayerEntitySequence2,
  playerentitysequence3: bbmanager.PlayerEntitySequence3,
  playerentitysequence4: bbmanager.PlayerEntitySequence4,
  playerentitysequence5: bbmanager.PlayerEntitySequence5) {
  lazy val Stats = playerentitysequence1.Stats
  lazy val SustainedTD = playerentitysequence1.SustainedTD
  lazy val bDead = playerentitysequence1.bDead
  lazy val bEdited = playerentitysequence1.bEdited
  lazy val bGenerated = playerentitysequence1.bGenerated
  lazy val bStar = playerentitysequence1.bStar
  lazy val BaseArmour = playerentitysequence1.BaseArmour
  lazy val BaseMovement = playerentitysequence1.BaseMovement
  lazy val BaseStrength = playerentitysequence1.BaseStrength
  lazy val BaseAgility = playerentitysequence1.BaseAgility
  lazy val Characteristics_fAgility = playerentitysequence2.Characteristics_fAgility
  lazy val Characteristics_fArmourValue = playerentitysequence2.Characteristics_fArmourValue
  lazy val Characteristics_fMovementAllowance = playerentitysequence2.Characteristics_fMovementAllowance
  lazy val Characteristics_fStrength = playerentitysequence2.Characteristics_fStrength
  lazy val ModifMovement = playerentitysequence2.ModifMovement
  lazy val ModifStrength = playerentitysequence2.ModifStrength
  lazy val ModifAgility = playerentitysequence2.ModifAgility
  lazy val ModifArmour = playerentitysequence2.ModifArmour
  lazy val Contract_iDuration = playerentitysequence2.Contract_iDuration
  lazy val Contract_iSeasonRemaining = playerentitysequence2.Contract_iSeasonRemaining
  lazy val fAgeing = playerentitysequence3.fAgeing
  lazy val idPlayer_Levels = playerentitysequence3.idPlayer_Levels
  lazy val idPlayer_Names = playerentitysequence3.idPlayer_Names
  lazy val idPlayer_Types = playerentitysequence3.idPlayer_Types
  lazy val idRaces = playerentitysequence3.idRaces
  lazy val ID = playerentitysequence3.ID
  lazy val idTeam_Listing = playerentitysequence3.idTeam_Listing
  lazy val iExperience = playerentitysequence3.iExperience
  lazy val iMatchSuspended = playerentitysequence3.iMatchSuspended
  lazy val iNbLevelsUp = playerentitysequence3.iNbLevelsUp
  lazy val iNumber = playerentitysequence4.iNumber
  lazy val iSalary = playerentitysequence4.iSalary
  lazy val iValue = playerentitysequence4.iValue
  lazy val Position = playerentitysequence4.Position
  lazy val strLevelUp = playerentitysequence4.strLevelUp
  lazy val strName = playerentitysequence4.strName
  lazy val TeamName = playerentitysequence4.TeamName
  lazy val CoachName = playerentitysequence4.CoachName
  lazy val CasualtyType = playerentitysequence4.CasualtyType
  lazy val Skills = playerentitysequence4.Skills
  lazy val BaseSkills = playerentitysequence5.BaseSkills
}


case class PlayerEntitySequence1(Stats: Option[bbmanager.PlayerStatsEntity],
  SustainedTD: Int,
  bDead: Option[Long],
  bEdited: Option[Long],
  bGenerated: Option[Long],
  bStar: Option[Long],
  BaseArmour: Int,
  BaseMovement: Int,
  BaseStrength: Int,
  BaseAgility: Int)

case class PlayerEntitySequence2(Characteristics_fAgility: Int,
  Characteristics_fArmourValue: Int,
  Characteristics_fMovementAllowance: Int,
  Characteristics_fStrength: Int,
  ModifMovement: Int,
  ModifStrength: Int,
  ModifAgility: Int,
  ModifArmour: Int,
  Contract_iDuration: Option[Long],
  Contract_iSeasonRemaining: Option[Long])

case class PlayerEntitySequence3(fAgeing: Option[Float],
  idPlayer_Levels: Option[Long],
  idPlayer_Names: Option[Long],
  idPlayer_Types: Option[Long],
  idRaces: Option[Long],
  ID: Long,
  idTeam_Listing: Option[Long],
  iExperience: Option[Long],
  iMatchSuspended: Option[Long],
  iNbLevelsUp: Option[Long])

case class PlayerEntitySequence4(iNumber: Option[Long],
  iSalary: Option[Long],
  iValue: Option[Long],
  Position: Option[String],
  strLevelUp: Option[String],
  strName: Option[String],
  TeamName: Option[String],
  CoachName: Option[String],
  CasualtyType: Option[String],
  Skills: Option[bbmanager.ArrayOfString])

case class PlayerEntitySequence5(BaseSkills: Option[bbmanager.ArrayOfString])

case class PlayerStatsEntity(playerstatsentitysequence1: bbmanager.PlayerStatsEntitySequence1,
  playerstatsentitysequence2: bbmanager.PlayerStatsEntitySequence2,
  playerstatsentitysequence3: bbmanager.PlayerStatsEntitySequence3) {
  lazy val ID = playerstatsentitysequence1.ID
  lazy val XP = playerstatsentitysequence1.XP
  lazy val LastMatchXP = playerstatsentitysequence1.LastMatchXP
  lazy val idPlayer_Listing = playerstatsentitysequence1.idPlayer_Listing
  lazy val iMatchPlayed = playerstatsentitysequence1.iMatchPlayed
  lazy val iMVP = playerstatsentitysequence1.iMVP
  lazy val Inflicted_iCasualties = playerstatsentitysequence1.Inflicted_iCasualties
  lazy val Inflicted_iCatches = playerstatsentitysequence1.Inflicted_iCatches
  lazy val Inflicted_iDead = playerstatsentitysequence1.Inflicted_iDead
  lazy val Inflicted_iInjuries = playerstatsentitysequence1.Inflicted_iInjuries
  lazy val Inflicted_iInterceptions = playerstatsentitysequence2.Inflicted_iInterceptions
  lazy val Inflicted_iKO = playerstatsentitysequence2.Inflicted_iKO
  lazy val Inflicted_iMetersPassing = playerstatsentitysequence2.Inflicted_iMetersPassing
  lazy val Inflicted_iMetersRunning = playerstatsentitysequence2.Inflicted_iMetersRunning
  lazy val Inflicted_iPasses = playerstatsentitysequence2.Inflicted_iPasses
  lazy val Inflicted_iStuns = playerstatsentitysequence2.Inflicted_iStuns
  lazy val Inflicted_iTackles = playerstatsentitysequence2.Inflicted_iTackles
  lazy val Inflicted_iTouchdowns = playerstatsentitysequence2.Inflicted_iTouchdowns
  lazy val Sustained_iCasualties = playerstatsentitysequence2.Sustained_iCasualties
  lazy val Sustained_iDead = playerstatsentitysequence2.Sustained_iDead
  lazy val Sustained_iInjuries = playerstatsentitysequence3.Sustained_iInjuries
  lazy val Sustained_iInterceptions = playerstatsentitysequence3.Sustained_iInterceptions
  lazy val Sustained_iKO = playerstatsentitysequence3.Sustained_iKO
  lazy val Sustained_iStuns = playerstatsentitysequence3.Sustained_iStuns
  lazy val Sustained_iTackles = playerstatsentitysequence3.Sustained_iTackles
}


case class PlayerStatsEntitySequence1(ID: Long,
  XP: Long,
  LastMatchXP: Long,
  idPlayer_Listing: Option[Long],
  iMatchPlayed: Option[Long],
  iMVP: Option[Long],
  Inflicted_iCasualties: Option[Long],
  Inflicted_iCatches: Option[Long],
  Inflicted_iDead: Option[Long],
  Inflicted_iInjuries: Option[Long])

case class PlayerStatsEntitySequence2(Inflicted_iInterceptions: Option[Long],
  Inflicted_iKO: Option[Long],
  Inflicted_iMetersPassing: Option[Long],
  Inflicted_iMetersRunning: Option[Long],
  Inflicted_iPasses: Option[Long],
  Inflicted_iStuns: Option[Long],
  Inflicted_iTackles: Option[Long],
  Inflicted_iTouchdowns: Option[Long],
  Sustained_iCasualties: Option[Long],
  Sustained_iDead: Option[Long])

case class PlayerStatsEntitySequence3(Sustained_iInjuries: Option[Long],
  Sustained_iInterceptions: Option[Long],
  Sustained_iKO: Option[Long],
  Sustained_iStuns: Option[Long],
  Sustained_iTackles: Option[Long])


case class ArrayOfTeamEntity(TeamEntity: Option[bbmanager.TeamEntity]*)


case class TeamEntity(teamentitysequence1: bbmanager.TeamEntitySequence1,
  teamentitysequence2: bbmanager.TeamEntitySequence2,
  teamentitysequence3: bbmanager.TeamEntitySequence3,
  teamentitysequence4: bbmanager.TeamEntitySequence4) {
  lazy val Name = teamentitysequence1.Name
  lazy val CoachName = teamentitysequence1.CoachName
  lazy val RaceId = teamentitysequence1.RaceId
  lazy val SustainedTD = teamentitysequence1.SustainedTD
  lazy val LeaguePoints = teamentitysequence1.LeaguePoints
  lazy val LeagueMatchs = teamentitysequence1.LeagueMatchs
  lazy val LeagueVictories = teamentitysequence1.LeagueVictories
  lazy val LeagueDraws = teamentitysequence1.LeagueDraws
  lazy val LeagueDefeats = teamentitysequence1.LeagueDefeats
  lazy val LeagueXP = teamentitysequence1.LeagueXP
  lazy val LeagueTD = teamentitysequence2.LeagueTD
  lazy val LeaguePasses = teamentitysequence2.LeaguePasses
  lazy val LeagueRecep = teamentitysequence2.LeagueRecep
  lazy val LeagueIntercep = teamentitysequence2.LeagueIntercep
  lazy val LeagueKO = teamentitysequence2.LeagueKO
  lazy val LeagueBlessures = teamentitysequence2.LeagueBlessures
  lazy val LeagueMisesAuSol = teamentitysequence2.LeagueMisesAuSol
  lazy val LeagueDeads = teamentitysequence2.LeagueDeads
  lazy val LeagueYardCourse = teamentitysequence2.LeagueYardCourse
  lazy val LeagueYardPasse = teamentitysequence2.LeagueYardPasse
  lazy val LeagueSustainedMisesAuSol = teamentitysequence3.LeagueSustainedMisesAuSol
  lazy val bApothecary = teamentitysequence3.bApothecary
  lazy val iCash = teamentitysequence3.iCash
  lazy val iCheerleaders = teamentitysequence3.iCheerleaders
  lazy val strBackground = teamentitysequence3.strBackground
  lazy val strLeitmotiv = teamentitysequence3.strLeitmotiv
  lazy val iPopularity = teamentitysequence3.iPopularity
  lazy val iRerolls = teamentitysequence3.iRerolls
  lazy val iValue = teamentitysequence3.iValue
  lazy val ListTV = teamentitysequence3.ListTV
  lazy val ListXP = teamentitysequence4.ListXP
}


case class TeamEntitySequence1(Name: Option[String],
  CoachName: Option[String],
  RaceId: Int,
  SustainedTD: Int,
  LeaguePoints: Int,
  LeagueMatchs: Int,
  LeagueVictories: Int,
  LeagueDraws: Int,
  LeagueDefeats: Int,
  LeagueXP: Int)

case class TeamEntitySequence2(LeagueTD: Long,
  LeaguePasses: Long,
  LeagueRecep: Long,
  LeagueIntercep: Long,
  LeagueKO: Long,
  LeagueBlessures: Long,
  LeagueMisesAuSol: Long,
  LeagueDeads: Long,
  LeagueYardCourse: Long,
  LeagueYardPasse: Long)

case class TeamEntitySequence3(LeagueSustainedMisesAuSol: Long,
  bApothecary: Option[Long],
  iCash: Option[Long],
  iCheerleaders: Option[Long],
  strBackground: Option[String],
  strLeitmotiv: Option[String],
  iPopularity: Option[Long],
  iRerolls: Option[Long],
  iValue: Option[Long],
  ListTV: Option[bbmanager.ArrayOfLong])

case class TeamEntitySequence4(ListXP: Option[bbmanager.ArrayOfLong])

case class ArrayOfLong(long: Long*)


case class GetPlayersInLeague(leagueId: Int)


case class GetPlayersInLeagueResponse(GetPlayersInLeagueResult: Option[bbmanager.ArrayOfPlayerEntity])


case class GetReplayData(matchId: Int)


case class GetReplayDataResponse(homeSkillsEntityList: Option[bbmanager.ArrayOfPlayerSkillEntity],
  awaySkillsEntityList: Option[bbmanager.ArrayOfPlayerSkillEntity],
  netCommandList: Option[bbmanager.ArrayOfNetCommandEntity],
  homePlayerListing: Option[bbmanager.ArrayOfPlayerListingEntity],
  awayPlayerListing: Option[bbmanager.ArrayOfPlayerListingEntity],
  log: Option[String])


case class ArrayOfPlayerSkillEntity(PlayerSkillEntity: Option[bbmanager.PlayerSkillEntity]*)


case class PlayerSkillEntity(ID: Long,
  idPlayer_Listing: Option[Long],
  idSkill_Listing: Option[Long])


case class ArrayOfNetCommandEntity(NetCommandEntity: Option[bbmanager.NetCommandEntity]*)


case class NetCommandEntity(ID: Long,
  iPart1: Option[Long],
  iPart2: Option[Long],
  iPart3: Option[Long],
  iPart4: Option[Long],
  iPart5: Option[Long],
  iPart6: Option[Long],
  iPart7: Option[Long],
  iPart8: Option[Long],
  iPart9: Option[Long],
  iPart10: Option[Long],
  iPart11: Option[Long],
  iPart12: Option[Long],
  iPlayerIndex: Option[Long],
  iTurn: Option[Long],
  iType: Option[Long])


case class ArrayOfPlayerListingEntity(PlayerListingEntity: Option[bbmanager.PlayerListingEntity]*)


case class PlayerListingEntity(ID: Long,
  idPlayer_Names: Option[Long],
  strName: Option[String],
  idPlayer_Types: Option[Long],
  idRaces: Option[Long],
  iNumber: Option[Long],
  iMatchSuspended: Option[Long])


case class GetTeamPlayers(leagueId: Int,
  teamName: Option[String],
  language: Option[String])


case class GetTeamPlayersResponse(groupPlayers: Option[bbmanager.ArrayOfPlayerEntity],
  groupTeams: Option[bbmanager.ArrayOfTeamEntity])


case class GetTeamsListing(matchId: Int)


case class GetTeamsListingResponse(homeTeam: Option[bbmanager.Home_Team_Listing],
  awayTeam: Option[bbmanager.Away_Team_Listing])


case class Home_Team_Listing(EntityKey: Option[bbmanager.EntityKey],
  ID: Long,
  strName: Option[String],
  idRaces: Option[Long],
  strLogo: Option[String],
  iTeamColor: Option[Long],
  strLeitmotiv: Option[String],
  strBackground: Option[String],
  iValue: Option[Long],
  iPopularity: Option[Long],
  iCash: Option[Long],
  iCheerleaders: Option[Long],
  iBalms: Option[Long],
  bApothecary: Option[Long],
  iRerolls: Option[Long],
  bEdited: Option[Long],
  idTeam_Listing_Filters: Option[Long],
  idStrings_Formatted_Background: Option[Long],
  idStrings_Localized_Leitmotiv: Option[Long],
  iNextPurchase: Option[Long]) extends EntityObject


trait EntityObject extends StructuralObject {
  val EntityKey: Option[bbmanager.EntityKey]
}


trait StructuralObject {
  
}


case class EntityKey(EntitySetName: Option[String],
  EntityContainerName: Option[String],
  EntityKeyValues: Option[bbmanager.ArrayOfEntityKeyMember])


case class ArrayOfEntityKeyMember(EntityKeyMember: Option[bbmanager.EntityKeyMember]*)


case class EntityKeyMember(Key: Option[String],
  Value: Option[scalaxb.DataRecord[Any]])


case class Away_Team_Listing(EntityKey: Option[bbmanager.EntityKey],
  ID: Long,
  strName: Option[String],
  idRaces: Option[Long],
  strLogo: Option[String],
  iTeamColor: Option[Long],
  strLeitmotiv: Option[String],
  strBackground: Option[String],
  iValue: Option[Long],
  iPopularity: Option[Long],
  iCash: Option[Long],
  iCheerleaders: Option[Long],
  iBalms: Option[Long],
  bApothecary: Option[Long],
  iRerolls: Option[Long],
  bEdited: Option[Long],
  idTeam_Listing_Filters: Option[Long],
  idStrings_Formatted_Background: Option[Long],
  idStrings_Localized_Leitmotiv: Option[Long],
  iNextPurchase: Option[Long]) extends EntityObject


case class GetLeaguePlayersStats(leagueId: Int,
  number: Int)


case class PlayerStat(Stat: Long,
  Name: Option[String],
  TeamName: Option[String],
  RaceId: Long)


case class ArrayOfPlayerStat(PlayerStat: Option[bbmanager.PlayerStat]*)


case class GetLeaguePlayersStatsResponse(bestTD: Option[bbmanager.ArrayOfPlayerStat],
  bestPasse: Option[bbmanager.ArrayOfPlayerStat],
  bestInterception: Option[bbmanager.ArrayOfPlayerStat],
  bestCatches: Option[bbmanager.ArrayOfPlayerStat],
  bestYardsRun: Option[bbmanager.ArrayOfPlayerStat],
  bestYardsPass: Option[bbmanager.ArrayOfPlayerStat],
  bestInjuries: Option[bbmanager.ArrayOfPlayerStat],
  bestViolent: Option[bbmanager.ArrayOfPlayerStat],
  bestKiller: Option[bbmanager.ArrayOfPlayerStat],
  bestPreneurCoup: Option[bbmanager.ArrayOfPlayerStat],
  bestXP: Option[bbmanager.ArrayOfPlayerStat])


case class GetLeagueTeamsStats(leagueId: Int,
  number: Int)


case class TeamStat(Stat: Long,
  Name: Option[String],
  CoachName: Option[String],
  RaceId: Long)


case class ArrayOfTeamStat(TeamStat: Option[bbmanager.TeamStat]*)


case class GetLeagueTeamsStatsResponse(bestTD: Option[bbmanager.ArrayOfTeamStat],
  bestPasse: Option[bbmanager.ArrayOfTeamStat],
  bestInterception: Option[bbmanager.ArrayOfTeamStat],
  bestCatches: Option[bbmanager.ArrayOfTeamStat],
  bestYardsRun: Option[bbmanager.ArrayOfTeamStat],
  bestYardsPass: Option[bbmanager.ArrayOfTeamStat],
  bestInjuries: Option[bbmanager.ArrayOfTeamStat],
  bestViolent: Option[bbmanager.ArrayOfTeamStat],
  bestKiller: Option[bbmanager.ArrayOfTeamStat],
  bestPreneurCoup: Option[bbmanager.ArrayOfTeamStat],
  bestXP: Option[bbmanager.ArrayOfTeamStat],
  bestDefensor: Option[bbmanager.ArrayOfTeamStat])


case class GetNbTeamsPerLeague(leagueId: Int)


case class GetNbTeamsPerLeagueResponse(GetNbTeamsPerLeagueResult: Int)


case class GetLeagueId(leagueName: Option[String])


case class GetLeagueIdResponse(GetLeagueIdResult: Int)


case class GetLeague(leagueId: Int)


case class GetLeagueResponse(GetLeagueResult: Option[bbmanager.LeagueEntity])


case class IsLeagueSupported(id: Int)


case class IsLeagueSupportedResponse(IsLeagueSupportedResult: Boolean)


case class GetMatchsByLeague(leagueId: Int)


case class LeagueMatch(Id: Int,
  CoachA: Option[String],
  TeamA: Option[String],
  RaceA: Option[String],
  ScoreA: Option[Int],
  CoachB: Option[String],
  TeamB: Option[String],
  RaceB: Option[String],
  ScoreB: Option[Int],
  Day: Option[Int],
  TVA: Option[Long],
  TVB: Option[Long],
  Date: javax.xml.datatype.XMLGregorianCalendar,
  RaceIdA: Option[Int],
  RaceIdB: Option[Int])


case class ArrayOfLeagueMatch(LeagueMatch: Option[bbmanager.LeagueMatch]*)


case class GetMatchsByLeagueResponse(GetMatchsByLeagueResult: Option[bbmanager.ArrayOfLeagueMatch])


case class GetELORanking(id: Int)


case class EloRanking(Coach: Option[String],
  Score: Double,
  NbMatchs: Int,
  Rank: Int,
  V: Int,
  N: Int,
  D: Int,
  LastEvolution: Double)


case class ArrayOfEloRanking(EloRanking: Option[bbmanager.EloRanking]*)


case class GetELORankingResponse(GetELORankingResult: Option[bbmanager.ArrayOfEloRanking])


trait PublicServiceSoap {
  def getAllLeagues(): Either[scalaxb.Fault[Any], Option[bbmanager.ArrayOfLeagueEntity]]
  def getTeamsInLeague(leagueId: Int): Either[scalaxb.Fault[Any], Option[bbmanager.ArrayOfString]]
  def getLeaguePlayers(leagueId: Int): Either[scalaxb.Fault[Any], GetLeaguePlayersResponse]
  def getPlayersInLeague(leagueId: Int): Either[scalaxb.Fault[Any], Option[bbmanager.ArrayOfPlayerEntity]]
  def getReplayData(matchId: Int): Either[scalaxb.Fault[Any], GetReplayDataResponse]
  def getTeamPlayers(leagueId: Int, teamName: Option[String], language: Option[String]): Either[scalaxb.Fault[Any], GetTeamPlayersResponse]
  def getTeamsListing(matchId: Int): Either[scalaxb.Fault[Any], GetTeamsListingResponse]
  def getLeaguePlayersStats(leagueId: Int, number: Int): Either[scalaxb.Fault[Any], GetLeaguePlayersStatsResponse]
  def getLeagueTeamsStats(leagueId: Int, number: Int): Either[scalaxb.Fault[Any], GetLeagueTeamsStatsResponse]
  def getNbTeamsPerLeague(leagueId: Int): Either[scalaxb.Fault[Any], Int]
  def getLeagueId(leagueName: Option[String]): Either[scalaxb.Fault[Any], Int]
  def getLeague(leagueId: Int): Either[scalaxb.Fault[Any], Option[bbmanager.LeagueEntity]]
  def isLeagueSupported(id: Int): Either[scalaxb.Fault[Any], Boolean]
  def getMatchsByLeague(leagueId: Int): Either[scalaxb.Fault[Any], Option[bbmanager.ArrayOfLeagueMatch]]
  def getELORanking(id: Int): Either[scalaxb.Fault[Any], Option[bbmanager.ArrayOfEloRanking]]
}


