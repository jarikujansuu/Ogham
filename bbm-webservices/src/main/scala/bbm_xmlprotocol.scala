// Generated by <a href="http://scalaxb.org/">scalaxb</a>.
package bbmanager
    
/**
usage:
val obj = scalaxb.fromXML[bbmanager.Foo](node)
val document = scalaxb.toXML[bbmanager.Foo](obj, "foo", bbmanager.defaultScope)
**/
object `package` extends XMLProtocol { }

trait XMLProtocol extends scalaxb.XMLStandardTypes {
  val defaultScope = scalaxb.toScope(None -> "jcmag22.hd.free.fr/Public",
    Some("tns") -> "jcmag22.hd.free.fr/Public",
    Some("xsi") -> "http://www.w3.org/2001/XMLSchema-instance",
    Some("xs") -> "http://www.w3.org/2001/XMLSchema")
  implicit lazy val BbmanagerGetAllLeaguesFormat: scalaxb.XMLFormat[bbmanager.GetAllLeagues] = new DefaultBbmanagerGetAllLeaguesFormat {}
  implicit lazy val BbmanagerGetAllLeaguesResponseFormat: scalaxb.XMLFormat[bbmanager.GetAllLeaguesResponse] = new DefaultBbmanagerGetAllLeaguesResponseFormat {}
  implicit lazy val BbmanagerArrayOfLeagueEntityFormat: scalaxb.XMLFormat[bbmanager.ArrayOfLeagueEntity] = new DefaultBbmanagerArrayOfLeagueEntityFormat {}
  implicit lazy val BbmanagerLeagueEntityFormat: scalaxb.XMLFormat[bbmanager.LeagueEntity] = new DefaultBbmanagerLeagueEntityFormat {}
  implicit lazy val BbmanagerGetTeamsInLeagueFormat: scalaxb.XMLFormat[bbmanager.GetTeamsInLeague] = new DefaultBbmanagerGetTeamsInLeagueFormat {}
  implicit lazy val BbmanagerGetTeamsInLeagueResponseFormat: scalaxb.XMLFormat[bbmanager.GetTeamsInLeagueResponse] = new DefaultBbmanagerGetTeamsInLeagueResponseFormat {}
  implicit lazy val BbmanagerArrayOfStringFormat: scalaxb.XMLFormat[bbmanager.ArrayOfString] = new DefaultBbmanagerArrayOfStringFormat {}
  implicit lazy val BbmanagerGetLeaguePlayersFormat: scalaxb.XMLFormat[bbmanager.GetLeaguePlayers] = new DefaultBbmanagerGetLeaguePlayersFormat {}
  implicit lazy val BbmanagerGetLeaguePlayersResponseFormat: scalaxb.XMLFormat[bbmanager.GetLeaguePlayersResponse] = new DefaultBbmanagerGetLeaguePlayersResponseFormat {}
  implicit lazy val BbmanagerArrayOfPlayerEntityFormat: scalaxb.XMLFormat[bbmanager.ArrayOfPlayerEntity] = new DefaultBbmanagerArrayOfPlayerEntityFormat {}
  implicit lazy val BbmanagerPlayerEntityFormat: scalaxb.XMLFormat[bbmanager.PlayerEntity] = new DefaultBbmanagerPlayerEntityFormat {}
  implicit lazy val BbmanagerPlayerEntitySequence1Format: scalaxb.XMLFormat[bbmanager.PlayerEntitySequence1] = new DefaultBbmanagerPlayerEntitySequence1Format {}
  implicit lazy val BbmanagerPlayerEntitySequence2Format: scalaxb.XMLFormat[bbmanager.PlayerEntitySequence2] = new DefaultBbmanagerPlayerEntitySequence2Format {}
  implicit lazy val BbmanagerPlayerEntitySequence3Format: scalaxb.XMLFormat[bbmanager.PlayerEntitySequence3] = new DefaultBbmanagerPlayerEntitySequence3Format {}
  implicit lazy val BbmanagerPlayerEntitySequence4Format: scalaxb.XMLFormat[bbmanager.PlayerEntitySequence4] = new DefaultBbmanagerPlayerEntitySequence4Format {}
  implicit lazy val BbmanagerPlayerEntitySequence5Format: scalaxb.XMLFormat[bbmanager.PlayerEntitySequence5] = new DefaultBbmanagerPlayerEntitySequence5Format {}
  implicit lazy val BbmanagerPlayerStatsEntityFormat: scalaxb.XMLFormat[bbmanager.PlayerStatsEntity] = new DefaultBbmanagerPlayerStatsEntityFormat {}
  implicit lazy val BbmanagerPlayerStatsEntitySequence1Format: scalaxb.XMLFormat[bbmanager.PlayerStatsEntitySequence1] = new DefaultBbmanagerPlayerStatsEntitySequence1Format {}
  implicit lazy val BbmanagerPlayerStatsEntitySequence2Format: scalaxb.XMLFormat[bbmanager.PlayerStatsEntitySequence2] = new DefaultBbmanagerPlayerStatsEntitySequence2Format {}
  implicit lazy val BbmanagerPlayerStatsEntitySequence3Format: scalaxb.XMLFormat[bbmanager.PlayerStatsEntitySequence3] = new DefaultBbmanagerPlayerStatsEntitySequence3Format {}
  implicit lazy val BbmanagerArrayOfTeamEntityFormat: scalaxb.XMLFormat[bbmanager.ArrayOfTeamEntity] = new DefaultBbmanagerArrayOfTeamEntityFormat {}
  implicit lazy val BbmanagerTeamEntityFormat: scalaxb.XMLFormat[bbmanager.TeamEntity] = new DefaultBbmanagerTeamEntityFormat {}
  implicit lazy val BbmanagerTeamEntitySequence1Format: scalaxb.XMLFormat[bbmanager.TeamEntitySequence1] = new DefaultBbmanagerTeamEntitySequence1Format {}
  implicit lazy val BbmanagerTeamEntitySequence2Format: scalaxb.XMLFormat[bbmanager.TeamEntitySequence2] = new DefaultBbmanagerTeamEntitySequence2Format {}
  implicit lazy val BbmanagerTeamEntitySequence3Format: scalaxb.XMLFormat[bbmanager.TeamEntitySequence3] = new DefaultBbmanagerTeamEntitySequence3Format {}
  implicit lazy val BbmanagerTeamEntitySequence4Format: scalaxb.XMLFormat[bbmanager.TeamEntitySequence4] = new DefaultBbmanagerTeamEntitySequence4Format {}
  implicit lazy val BbmanagerArrayOfLongFormat: scalaxb.XMLFormat[bbmanager.ArrayOfLong] = new DefaultBbmanagerArrayOfLongFormat {}
  implicit lazy val BbmanagerGetPlayersInLeagueFormat: scalaxb.XMLFormat[bbmanager.GetPlayersInLeague] = new DefaultBbmanagerGetPlayersInLeagueFormat {}
  implicit lazy val BbmanagerGetPlayersInLeagueResponseFormat: scalaxb.XMLFormat[bbmanager.GetPlayersInLeagueResponse] = new DefaultBbmanagerGetPlayersInLeagueResponseFormat {}
  implicit lazy val BbmanagerGetReplayDataFormat: scalaxb.XMLFormat[bbmanager.GetReplayData] = new DefaultBbmanagerGetReplayDataFormat {}
  implicit lazy val BbmanagerGetReplayDataResponseFormat: scalaxb.XMLFormat[bbmanager.GetReplayDataResponse] = new DefaultBbmanagerGetReplayDataResponseFormat {}
  implicit lazy val BbmanagerArrayOfPlayerSkillEntityFormat: scalaxb.XMLFormat[bbmanager.ArrayOfPlayerSkillEntity] = new DefaultBbmanagerArrayOfPlayerSkillEntityFormat {}
  implicit lazy val BbmanagerPlayerSkillEntityFormat: scalaxb.XMLFormat[bbmanager.PlayerSkillEntity] = new DefaultBbmanagerPlayerSkillEntityFormat {}
  implicit lazy val BbmanagerArrayOfNetCommandEntityFormat: scalaxb.XMLFormat[bbmanager.ArrayOfNetCommandEntity] = new DefaultBbmanagerArrayOfNetCommandEntityFormat {}
  implicit lazy val BbmanagerNetCommandEntityFormat: scalaxb.XMLFormat[bbmanager.NetCommandEntity] = new DefaultBbmanagerNetCommandEntityFormat {}
  implicit lazy val BbmanagerArrayOfPlayerListingEntityFormat: scalaxb.XMLFormat[bbmanager.ArrayOfPlayerListingEntity] = new DefaultBbmanagerArrayOfPlayerListingEntityFormat {}
  implicit lazy val BbmanagerPlayerListingEntityFormat: scalaxb.XMLFormat[bbmanager.PlayerListingEntity] = new DefaultBbmanagerPlayerListingEntityFormat {}
  implicit lazy val BbmanagerGetTeamPlayersFormat: scalaxb.XMLFormat[bbmanager.GetTeamPlayers] = new DefaultBbmanagerGetTeamPlayersFormat {}
  implicit lazy val BbmanagerGetTeamPlayersResponseFormat: scalaxb.XMLFormat[bbmanager.GetTeamPlayersResponse] = new DefaultBbmanagerGetTeamPlayersResponseFormat {}
  implicit lazy val BbmanagerGetTeamsListingFormat: scalaxb.XMLFormat[bbmanager.GetTeamsListing] = new DefaultBbmanagerGetTeamsListingFormat {}
  implicit lazy val BbmanagerGetTeamsListingResponseFormat: scalaxb.XMLFormat[bbmanager.GetTeamsListingResponse] = new DefaultBbmanagerGetTeamsListingResponseFormat {}
  implicit lazy val BbmanagerHome_Team_ListingFormat: scalaxb.XMLFormat[bbmanager.Home_Team_Listing] = new DefaultBbmanagerHome_Team_ListingFormat {}
  implicit lazy val BbmanagerEntityObjectFormat: scalaxb.XMLFormat[bbmanager.EntityObject] = new DefaultBbmanagerEntityObjectFormat {}
  implicit lazy val BbmanagerStructuralObjectFormat: scalaxb.XMLFormat[bbmanager.StructuralObject] = new DefaultBbmanagerStructuralObjectFormat {}
  implicit lazy val BbmanagerEntityKeyFormat: scalaxb.XMLFormat[bbmanager.EntityKey] = new DefaultBbmanagerEntityKeyFormat {}
  implicit lazy val BbmanagerArrayOfEntityKeyMemberFormat: scalaxb.XMLFormat[bbmanager.ArrayOfEntityKeyMember] = new DefaultBbmanagerArrayOfEntityKeyMemberFormat {}
  implicit lazy val BbmanagerEntityKeyMemberFormat: scalaxb.XMLFormat[bbmanager.EntityKeyMember] = new DefaultBbmanagerEntityKeyMemberFormat {}
  implicit lazy val BbmanagerAway_Team_ListingFormat: scalaxb.XMLFormat[bbmanager.Away_Team_Listing] = new DefaultBbmanagerAway_Team_ListingFormat {}
  implicit lazy val BbmanagerGetLeaguePlayersStatsFormat: scalaxb.XMLFormat[bbmanager.GetLeaguePlayersStats] = new DefaultBbmanagerGetLeaguePlayersStatsFormat {}
  implicit lazy val BbmanagerPlayerStatFormat: scalaxb.XMLFormat[bbmanager.PlayerStat] = new DefaultBbmanagerPlayerStatFormat {}
  implicit lazy val BbmanagerArrayOfPlayerStatFormat: scalaxb.XMLFormat[bbmanager.ArrayOfPlayerStat] = new DefaultBbmanagerArrayOfPlayerStatFormat {}
  implicit lazy val BbmanagerGetLeaguePlayersStatsResponseFormat: scalaxb.XMLFormat[bbmanager.GetLeaguePlayersStatsResponse] = new DefaultBbmanagerGetLeaguePlayersStatsResponseFormat {}
  implicit lazy val BbmanagerGetLeagueTeamsStatsFormat: scalaxb.XMLFormat[bbmanager.GetLeagueTeamsStats] = new DefaultBbmanagerGetLeagueTeamsStatsFormat {}
  implicit lazy val BbmanagerTeamStatFormat: scalaxb.XMLFormat[bbmanager.TeamStat] = new DefaultBbmanagerTeamStatFormat {}
  implicit lazy val BbmanagerArrayOfTeamStatFormat: scalaxb.XMLFormat[bbmanager.ArrayOfTeamStat] = new DefaultBbmanagerArrayOfTeamStatFormat {}
  implicit lazy val BbmanagerGetLeagueTeamsStatsResponseFormat: scalaxb.XMLFormat[bbmanager.GetLeagueTeamsStatsResponse] = new DefaultBbmanagerGetLeagueTeamsStatsResponseFormat {}
  implicit lazy val BbmanagerGetNbTeamsPerLeagueFormat: scalaxb.XMLFormat[bbmanager.GetNbTeamsPerLeague] = new DefaultBbmanagerGetNbTeamsPerLeagueFormat {}
  implicit lazy val BbmanagerGetNbTeamsPerLeagueResponseFormat: scalaxb.XMLFormat[bbmanager.GetNbTeamsPerLeagueResponse] = new DefaultBbmanagerGetNbTeamsPerLeagueResponseFormat {}
  implicit lazy val BbmanagerGetLeagueIdFormat: scalaxb.XMLFormat[bbmanager.GetLeagueId] = new DefaultBbmanagerGetLeagueIdFormat {}
  implicit lazy val BbmanagerGetLeagueIdResponseFormat: scalaxb.XMLFormat[bbmanager.GetLeagueIdResponse] = new DefaultBbmanagerGetLeagueIdResponseFormat {}
  implicit lazy val BbmanagerGetLeagueFormat: scalaxb.XMLFormat[bbmanager.GetLeague] = new DefaultBbmanagerGetLeagueFormat {}
  implicit lazy val BbmanagerGetLeagueResponseFormat: scalaxb.XMLFormat[bbmanager.GetLeagueResponse] = new DefaultBbmanagerGetLeagueResponseFormat {}
  implicit lazy val BbmanagerIsLeagueSupportedFormat: scalaxb.XMLFormat[bbmanager.IsLeagueSupported] = new DefaultBbmanagerIsLeagueSupportedFormat {}
  implicit lazy val BbmanagerIsLeagueSupportedResponseFormat: scalaxb.XMLFormat[bbmanager.IsLeagueSupportedResponse] = new DefaultBbmanagerIsLeagueSupportedResponseFormat {}
  implicit lazy val BbmanagerGetMatchsByLeagueFormat: scalaxb.XMLFormat[bbmanager.GetMatchsByLeague] = new DefaultBbmanagerGetMatchsByLeagueFormat {}
  implicit lazy val BbmanagerLeagueMatchFormat: scalaxb.XMLFormat[bbmanager.LeagueMatch] = new DefaultBbmanagerLeagueMatchFormat {}
  implicit lazy val BbmanagerArrayOfLeagueMatchFormat: scalaxb.XMLFormat[bbmanager.ArrayOfLeagueMatch] = new DefaultBbmanagerArrayOfLeagueMatchFormat {}
  implicit lazy val BbmanagerGetMatchsByLeagueResponseFormat: scalaxb.XMLFormat[bbmanager.GetMatchsByLeagueResponse] = new DefaultBbmanagerGetMatchsByLeagueResponseFormat {}
  implicit lazy val BbmanagerGetELORankingFormat: scalaxb.XMLFormat[bbmanager.GetELORanking] = new DefaultBbmanagerGetELORankingFormat {}
  implicit lazy val BbmanagerEloRankingFormat: scalaxb.XMLFormat[bbmanager.EloRanking] = new DefaultBbmanagerEloRankingFormat {}
  implicit lazy val BbmanagerArrayOfEloRankingFormat: scalaxb.XMLFormat[bbmanager.ArrayOfEloRanking] = new DefaultBbmanagerArrayOfEloRankingFormat {}
  implicit lazy val BbmanagerGetELORankingResponseFormat: scalaxb.XMLFormat[bbmanager.GetELORankingResponse] = new DefaultBbmanagerGetELORankingResponseFormat {}

  trait DefaultBbmanagerGetAllLeaguesFormat extends scalaxb.XMLFormat[bbmanager.GetAllLeagues] with scalaxb.CanWriteChildNodes[bbmanager.GetAllLeagues] {
    val targetNamespace: Option[String] = Some("jcmag22.hd.free.fr/Public")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, bbmanager.GetAllLeagues] = seq match {
      case node: scala.xml.Node => Right(bbmanager.GetAllLeagues())
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    def writesChildNodes(__obj: bbmanager.GetAllLeagues, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil

  }
  trait DefaultBbmanagerGetAllLeaguesResponseFormat extends scalaxb.ElemNameParser[bbmanager.GetAllLeaguesResponse] {
    val targetNamespace: Option[String] = Some("jcmag22.hd.free.fr/Public")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[bbmanager.GetAllLeaguesResponse] =
      opt(scalaxb.ElemName(targetNamespace, "GetAllLeaguesResult")) ^^
      { case p1 =>
      bbmanager.GetAllLeaguesResponse(p1.headOption map { scalaxb.fromXML[bbmanager.ArrayOfLeagueEntity](_, scalaxb.ElemName(node) :: stack) }) }
    
    def writesChildNodes(__obj: bbmanager.GetAllLeaguesResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.GetAllLeaguesResult map { scalaxb.toXML[bbmanager.ArrayOfLeagueEntity](_, targetNamespace, Some("GetAllLeaguesResult"), __scope, false) } getOrElse {Nil})
  }
  trait DefaultBbmanagerArrayOfLeagueEntityFormat extends scalaxb.ElemNameParser[bbmanager.ArrayOfLeagueEntity] {
    val targetNamespace: Option[String] = Some("jcmag22.hd.free.fr/Public")
    
    override def typeName: Option[String] = Some("ArrayOfLeagueEntity")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[bbmanager.ArrayOfLeagueEntity] =
      rep(scalaxb.ElemName(targetNamespace, "LeagueEntity")) ^^
      { case p1 =>
      bbmanager.ArrayOfLeagueEntity(p1.toSeq map { _.nilOption map { scalaxb.fromXML[bbmanager.LeagueEntity](_, scalaxb.ElemName(node) :: stack) }}: _*) }
    
    def writesChildNodes(__obj: bbmanager.ArrayOfLeagueEntity, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.LeagueEntity flatMap { scalaxb.toXML[Option[bbmanager.LeagueEntity]](_, targetNamespace, Some("LeagueEntity"), __scope, false) })
  }

  trait DefaultBbmanagerLeagueEntityFormat extends scalaxb.ElemNameParser[bbmanager.LeagueEntity] {
    val targetNamespace: Option[String] = Some("jcmag22.hd.free.fr/Public")
    
    override def typeName: Option[String] = Some("LeagueEntity")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[bbmanager.LeagueEntity] =
      (scalaxb.ElemName(targetNamespace, "Id")) ~ 
      opt(scalaxb.ElemName(targetNamespace, "Name")) ~ 
      (scalaxb.ElemName(targetNamespace, "DateCreated")) ~ 
      (scalaxb.ElemName(targetNamespace, "CommissaireId")) ~ 
      opt(scalaxb.ElemName(targetNamespace, "CreatedByName")) ~ 
      opt(scalaxb.ElemName(targetNamespace, "Password")) ~ 
      (scalaxb.ElemName(targetNamespace, "Confidential")) ~ 
      (scalaxb.ElemName(targetNamespace, "NbMatchs")) ~ 
      (scalaxb.ElemName(targetNamespace, "NbTeams")) ~ 
      opt(scalaxb.ElemName(targetNamespace, "Url")) ~ 
      (scalaxb.ElemName(targetNamespace, "PointsSystemId")) ~ 
      (scalaxb.ElemName(targetNamespace, "IsMetaLeague")) ~ 
      (scalaxb.ElemName(targetNamespace, "AddVirtualTD")) ~ 
      (scalaxb.ElemName(targetNamespace, "Finished")) ~ 
      opt(scalaxb.ElemName(targetNamespace, "FTPFolder")) ~ 
      opt(scalaxb.ElemName(targetNamespace, "FTPLogin")) ~ 
      opt(scalaxb.ElemName(targetNamespace, "FTPPassword")) ~ 
      opt(scalaxb.ElemName(targetNamespace, "ImageHttp")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 =>
      bbmanager.LeagueEntity(scalaxb.fromXML[Int](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Int](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[Boolean](p7, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Int](p8, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Int](p9, scalaxb.ElemName(node) :: stack),
        p10.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[Int](p11, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Boolean](p12, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Boolean](p13, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Boolean](p14, scalaxb.ElemName(node) :: stack),
        p15.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p16.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p17.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p18.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) }
    
    def writesChildNodes(__obj: bbmanager.LeagueEntity, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[Int](__obj.Id, targetNamespace, Some("Id"), __scope, false),
        __obj.Name map { scalaxb.toXML[String](_, targetNamespace, Some("Name"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.DateCreated, targetNamespace, Some("DateCreated"), __scope, false),
        scalaxb.toXML[Int](__obj.CommissaireId, targetNamespace, Some("CommissaireId"), __scope, false),
        __obj.CreatedByName map { scalaxb.toXML[String](_, targetNamespace, Some("CreatedByName"), __scope, false) } getOrElse {Nil},
        __obj.Password map { scalaxb.toXML[String](_, targetNamespace, Some("Password"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[Boolean](__obj.Confidential, targetNamespace, Some("Confidential"), __scope, false),
        scalaxb.toXML[Int](__obj.NbMatchs, targetNamespace, Some("NbMatchs"), __scope, false),
        scalaxb.toXML[Int](__obj.NbTeams, targetNamespace, Some("NbTeams"), __scope, false),
        __obj.Url map { scalaxb.toXML[String](_, targetNamespace, Some("Url"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[Int](__obj.PointsSystemId, targetNamespace, Some("PointsSystemId"), __scope, false),
        scalaxb.toXML[Boolean](__obj.IsMetaLeague, targetNamespace, Some("IsMetaLeague"), __scope, false),
        scalaxb.toXML[Boolean](__obj.AddVirtualTD, targetNamespace, Some("AddVirtualTD"), __scope, false),
        scalaxb.toXML[Boolean](__obj.Finished, targetNamespace, Some("Finished"), __scope, false),
        __obj.FTPFolder map { scalaxb.toXML[String](_, targetNamespace, Some("FTPFolder"), __scope, false) } getOrElse {Nil},
        __obj.FTPLogin map { scalaxb.toXML[String](_, targetNamespace, Some("FTPLogin"), __scope, false) } getOrElse {Nil},
        __obj.FTPPassword map { scalaxb.toXML[String](_, targetNamespace, Some("FTPPassword"), __scope, false) } getOrElse {Nil},
        __obj.ImageHttp map { scalaxb.toXML[String](_, targetNamespace, Some("ImageHttp"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultBbmanagerGetTeamsInLeagueFormat extends scalaxb.ElemNameParser[bbmanager.GetTeamsInLeague] {
    val targetNamespace: Option[String] = Some("jcmag22.hd.free.fr/Public")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[bbmanager.GetTeamsInLeague] =
      (scalaxb.ElemName(targetNamespace, "leagueId")) ^^
      { case p1 =>
      bbmanager.GetTeamsInLeague(scalaxb.fromXML[Int](p1, scalaxb.ElemName(node) :: stack)) }
    
    def writesChildNodes(__obj: bbmanager.GetTeamsInLeague, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[Int](__obj.leagueId, targetNamespace, Some("leagueId"), __scope, false))
  }
  trait DefaultBbmanagerGetTeamsInLeagueResponseFormat extends scalaxb.ElemNameParser[bbmanager.GetTeamsInLeagueResponse] {
    val targetNamespace: Option[String] = Some("jcmag22.hd.free.fr/Public")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[bbmanager.GetTeamsInLeagueResponse] =
      opt(scalaxb.ElemName(targetNamespace, "GetTeamsInLeagueResult")) ^^
      { case p1 =>
      bbmanager.GetTeamsInLeagueResponse(p1.headOption map { scalaxb.fromXML[bbmanager.ArrayOfString](_, scalaxb.ElemName(node) :: stack) }) }
    
    def writesChildNodes(__obj: bbmanager.GetTeamsInLeagueResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.GetTeamsInLeagueResult map { scalaxb.toXML[bbmanager.ArrayOfString](_, targetNamespace, Some("GetTeamsInLeagueResult"), __scope, false) } getOrElse {Nil})
  }
  trait DefaultBbmanagerArrayOfStringFormat extends scalaxb.ElemNameParser[bbmanager.ArrayOfString] {
    val targetNamespace: Option[String] = Some("jcmag22.hd.free.fr/Public")
    
    override def typeName: Option[String] = Some("ArrayOfString")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[bbmanager.ArrayOfString] =
      rep(scalaxb.ElemName(targetNamespace, "string")) ^^
      { case p1 =>
      bbmanager.ArrayOfString(p1.toSeq map { _.nilOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }}: _*) }
    
    def writesChildNodes(__obj: bbmanager.ArrayOfString, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.string flatMap { scalaxb.toXML[Option[String]](_, targetNamespace, Some("string"), __scope, false) })
  }

  trait DefaultBbmanagerGetLeaguePlayersFormat extends scalaxb.ElemNameParser[bbmanager.GetLeaguePlayers] {
    val targetNamespace: Option[String] = Some("jcmag22.hd.free.fr/Public")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[bbmanager.GetLeaguePlayers] =
      (scalaxb.ElemName(targetNamespace, "leagueId")) ^^
      { case p1 =>
      bbmanager.GetLeaguePlayers(scalaxb.fromXML[Int](p1, scalaxb.ElemName(node) :: stack)) }
    
    def writesChildNodes(__obj: bbmanager.GetLeaguePlayers, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[Int](__obj.leagueId, targetNamespace, Some("leagueId"), __scope, false))
  }
  trait DefaultBbmanagerGetLeaguePlayersResponseFormat extends scalaxb.ElemNameParser[bbmanager.GetLeaguePlayersResponse] {
    val targetNamespace: Option[String] = Some("jcmag22.hd.free.fr/Public")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[bbmanager.GetLeaguePlayersResponse] =
      opt(scalaxb.ElemName(targetNamespace, "groupPlayers")) ~ 
      opt(scalaxb.ElemName(targetNamespace, "groupTeams")) ^^
      { case p1 ~ p2 =>
      bbmanager.GetLeaguePlayersResponse(p1.headOption map { scalaxb.fromXML[bbmanager.ArrayOfPlayerEntity](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[bbmanager.ArrayOfTeamEntity](_, scalaxb.ElemName(node) :: stack) }) }
    
    def writesChildNodes(__obj: bbmanager.GetLeaguePlayersResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.groupPlayers map { scalaxb.toXML[bbmanager.ArrayOfPlayerEntity](_, targetNamespace, Some("groupPlayers"), __scope, false) } getOrElse {Nil},
        __obj.groupTeams map { scalaxb.toXML[bbmanager.ArrayOfTeamEntity](_, targetNamespace, Some("groupTeams"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultBbmanagerArrayOfPlayerEntityFormat extends scalaxb.ElemNameParser[bbmanager.ArrayOfPlayerEntity] {
    val targetNamespace: Option[String] = Some("jcmag22.hd.free.fr/Public")
    
    override def typeName: Option[String] = Some("ArrayOfPlayerEntity")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[bbmanager.ArrayOfPlayerEntity] =
      rep(scalaxb.ElemName(targetNamespace, "PlayerEntity")) ^^
      { case p1 =>
      bbmanager.ArrayOfPlayerEntity(p1.toSeq map { _.nilOption map { scalaxb.fromXML[bbmanager.PlayerEntity](_, scalaxb.ElemName(node) :: stack) }}: _*) }
    
    def writesChildNodes(__obj: bbmanager.ArrayOfPlayerEntity, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.PlayerEntity flatMap { scalaxb.toXML[Option[bbmanager.PlayerEntity]](_, targetNamespace, Some("PlayerEntity"), __scope, false) })
  }

  trait DefaultBbmanagerPlayerEntityFormat extends scalaxb.ElemNameParser[bbmanager.PlayerEntity] {
    val targetNamespace: Option[String] = Some("jcmag22.hd.free.fr/Public")
    
    override def typeName: Option[String] = Some("PlayerEntity")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[bbmanager.PlayerEntity] =
      ((opt(scalaxb.ElemName(targetNamespace, "Stats")) ~ 
      (scalaxb.ElemName(targetNamespace, "SustainedTD")) ~ 
      (scalaxb.ElemName(targetNamespace, "bDead")) ~ 
      (scalaxb.ElemName(targetNamespace, "bEdited")) ~ 
      (scalaxb.ElemName(targetNamespace, "bGenerated")) ~ 
      (scalaxb.ElemName(targetNamespace, "bStar")) ~ 
      (scalaxb.ElemName(targetNamespace, "BaseArmour")) ~ 
      (scalaxb.ElemName(targetNamespace, "BaseMovement")) ~ 
      (scalaxb.ElemName(targetNamespace, "BaseStrength")) ~ 
      (scalaxb.ElemName(targetNamespace, "BaseAgility"))) ^^ 
        { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 => bbmanager.PlayerEntitySequence1(p1.headOption map { scalaxb.fromXML[bbmanager.PlayerStatsEntity](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[Int](p2, scalaxb.ElemName(node) :: stack),
        p3.nilOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) },
        p4.nilOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) },
        p5.nilOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) },
        p6.nilOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[Int](p7, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Int](p8, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Int](p9, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Int](p10, scalaxb.ElemName(node) :: stack)) }) ~ 
      (((scalaxb.ElemName(targetNamespace, "Characteristics_fAgility")) ~ 
      (scalaxb.ElemName(targetNamespace, "Characteristics_fArmourValue")) ~ 
      (scalaxb.ElemName(targetNamespace, "Characteristics_fMovementAllowance")) ~ 
      (scalaxb.ElemName(targetNamespace, "Characteristics_fStrength")) ~ 
      (scalaxb.ElemName(targetNamespace, "ModifMovement")) ~ 
      (scalaxb.ElemName(targetNamespace, "ModifStrength")) ~ 
      (scalaxb.ElemName(targetNamespace, "ModifAgility")) ~ 
      (scalaxb.ElemName(targetNamespace, "ModifArmour")) ~ 
      (scalaxb.ElemName(targetNamespace, "Contract_iDuration")) ~ 
      (scalaxb.ElemName(targetNamespace, "Contract_iSeasonRemaining"))) ^^ 
        { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 => bbmanager.PlayerEntitySequence2(scalaxb.fromXML[Int](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Int](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Int](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Int](p4, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Int](p5, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Int](p6, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Int](p7, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Int](p8, scalaxb.ElemName(node) :: stack),
        p9.nilOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) },
        p10.nilOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) }) }) ~ 
      (((scalaxb.ElemName(targetNamespace, "fAgeing")) ~ 
      (scalaxb.ElemName(targetNamespace, "idPlayer_Levels")) ~ 
      (scalaxb.ElemName(targetNamespace, "idPlayer_Names")) ~ 
      (scalaxb.ElemName(targetNamespace, "idPlayer_Types")) ~ 
      (scalaxb.ElemName(targetNamespace, "idRaces")) ~ 
      (scalaxb.ElemName(targetNamespace, "ID")) ~ 
      (scalaxb.ElemName(targetNamespace, "idTeam_Listing")) ~ 
      (scalaxb.ElemName(targetNamespace, "iExperience")) ~ 
      (scalaxb.ElemName(targetNamespace, "iMatchSuspended")) ~ 
      (scalaxb.ElemName(targetNamespace, "iNbLevelsUp"))) ^^ 
        { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 => bbmanager.PlayerEntitySequence3(p1.nilOption map { scalaxb.fromXML[Float](_, scalaxb.ElemName(node) :: stack) },
        p2.nilOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) },
        p3.nilOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) },
        p4.nilOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) },
        p5.nilOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[Long](p6, scalaxb.ElemName(node) :: stack),
        p7.nilOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) },
        p8.nilOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) },
        p9.nilOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) },
        p10.nilOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) }) }) ~ 
      (((scalaxb.ElemName(targetNamespace, "iNumber")) ~ 
      (scalaxb.ElemName(targetNamespace, "iSalary")) ~ 
      (scalaxb.ElemName(targetNamespace, "iValue")) ~ 
      opt(scalaxb.ElemName(targetNamespace, "Position")) ~ 
      opt(scalaxb.ElemName(targetNamespace, "strLevelUp")) ~ 
      opt(scalaxb.ElemName(targetNamespace, "strName")) ~ 
      opt(scalaxb.ElemName(targetNamespace, "TeamName")) ~ 
      opt(scalaxb.ElemName(targetNamespace, "CoachName")) ~ 
      opt(scalaxb.ElemName(targetNamespace, "CasualtyType")) ~ 
      opt(scalaxb.ElemName(targetNamespace, "Skills"))) ^^ 
        { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 => bbmanager.PlayerEntitySequence4(p1.nilOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) },
        p2.nilOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) },
        p3.nilOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[bbmanager.ArrayOfString](_, scalaxb.ElemName(node) :: stack) }) }) ~ 
      ((opt(scalaxb.ElemName(targetNamespace, "BaseSkills"))) ^^ 
        { case p1 => bbmanager.PlayerEntitySequence5(p1.headOption map { scalaxb.fromXML[bbmanager.ArrayOfString](_, scalaxb.ElemName(node) :: stack) }) }) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      bbmanager.PlayerEntity(p1,
        p2,
        p3,
        p4,
        p5) }
    
    def writesChildNodes(__obj: bbmanager.PlayerEntity, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[bbmanager.PlayerEntitySequence1](__obj.playerentitysequence1, None, Some("playerentitysequence1"), __scope, false),
        scalaxb.toXML[bbmanager.PlayerEntitySequence2](__obj.playerentitysequence2, None, Some("playerentitysequence2"), __scope, false),
        scalaxb.toXML[bbmanager.PlayerEntitySequence3](__obj.playerentitysequence3, None, Some("playerentitysequence3"), __scope, false),
        scalaxb.toXML[bbmanager.PlayerEntitySequence4](__obj.playerentitysequence4, None, Some("playerentitysequence4"), __scope, false),
        scalaxb.toXML[bbmanager.PlayerEntitySequence5](__obj.playerentitysequence5, None, Some("playerentitysequence5"), __scope, false))

  }

  trait DefaultBbmanagerPlayerEntitySequence1Format extends scalaxb.XMLFormat[bbmanager.PlayerEntitySequence1] {
    val targetNamespace: Option[String] = Some("jcmag22.hd.free.fr/Public")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, bbmanager.PlayerEntitySequence1] = Left("don't call me.")
    
    def writes(__obj: bbmanager.PlayerEntitySequence1, __namespace: Option[String], __elementLabel: Option[String], 
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      Seq.concat(__obj.Stats map { scalaxb.toXML[bbmanager.PlayerStatsEntity](_, targetNamespace, Some("Stats"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[Int](__obj.SustainedTD, targetNamespace, Some("SustainedTD"), __scope, false),
        scalaxb.toXML[Option[Long]](__obj.bDead, targetNamespace, Some("bDead"), __scope, false),
        scalaxb.toXML[Option[Long]](__obj.bEdited, targetNamespace, Some("bEdited"), __scope, false),
        scalaxb.toXML[Option[Long]](__obj.bGenerated, targetNamespace, Some("bGenerated"), __scope, false),
        scalaxb.toXML[Option[Long]](__obj.bStar, targetNamespace, Some("bStar"), __scope, false),
        scalaxb.toXML[Int](__obj.BaseArmour, targetNamespace, Some("BaseArmour"), __scope, false),
        scalaxb.toXML[Int](__obj.BaseMovement, targetNamespace, Some("BaseMovement"), __scope, false),
        scalaxb.toXML[Int](__obj.BaseStrength, targetNamespace, Some("BaseStrength"), __scope, false),
        scalaxb.toXML[Int](__obj.BaseAgility, targetNamespace, Some("BaseAgility"), __scope, false))


  }

  trait DefaultBbmanagerPlayerEntitySequence2Format extends scalaxb.XMLFormat[bbmanager.PlayerEntitySequence2] {
    val targetNamespace: Option[String] = Some("jcmag22.hd.free.fr/Public")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, bbmanager.PlayerEntitySequence2] = Left("don't call me.")
    
    def writes(__obj: bbmanager.PlayerEntitySequence2, __namespace: Option[String], __elementLabel: Option[String], 
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      Seq.concat(scalaxb.toXML[Int](__obj.Characteristics_fAgility, targetNamespace, Some("Characteristics_fAgility"), __scope, false),
        scalaxb.toXML[Int](__obj.Characteristics_fArmourValue, targetNamespace, Some("Characteristics_fArmourValue"), __scope, false),
        scalaxb.toXML[Int](__obj.Characteristics_fMovementAllowance, targetNamespace, Some("Characteristics_fMovementAllowance"), __scope, false),
        scalaxb.toXML[Int](__obj.Characteristics_fStrength, targetNamespace, Some("Characteristics_fStrength"), __scope, false),
        scalaxb.toXML[Int](__obj.ModifMovement, targetNamespace, Some("ModifMovement"), __scope, false),
        scalaxb.toXML[Int](__obj.ModifStrength, targetNamespace, Some("ModifStrength"), __scope, false),
        scalaxb.toXML[Int](__obj.ModifAgility, targetNamespace, Some("ModifAgility"), __scope, false),
        scalaxb.toXML[Int](__obj.ModifArmour, targetNamespace, Some("ModifArmour"), __scope, false),
        scalaxb.toXML[Option[Long]](__obj.Contract_iDuration, targetNamespace, Some("Contract_iDuration"), __scope, false),
        scalaxb.toXML[Option[Long]](__obj.Contract_iSeasonRemaining, targetNamespace, Some("Contract_iSeasonRemaining"), __scope, false))


  }

  trait DefaultBbmanagerPlayerEntitySequence3Format extends scalaxb.XMLFormat[bbmanager.PlayerEntitySequence3] {
    val targetNamespace: Option[String] = Some("jcmag22.hd.free.fr/Public")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, bbmanager.PlayerEntitySequence3] = Left("don't call me.")
    
    def writes(__obj: bbmanager.PlayerEntitySequence3, __namespace: Option[String], __elementLabel: Option[String], 
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      Seq.concat(scalaxb.toXML[Option[Float]](__obj.fAgeing, targetNamespace, Some("fAgeing"), __scope, false),
        scalaxb.toXML[Option[Long]](__obj.idPlayer_Levels, targetNamespace, Some("idPlayer_Levels"), __scope, false),
        scalaxb.toXML[Option[Long]](__obj.idPlayer_Names, targetNamespace, Some("idPlayer_Names"), __scope, false),
        scalaxb.toXML[Option[Long]](__obj.idPlayer_Types, targetNamespace, Some("idPlayer_Types"), __scope, false),
        scalaxb.toXML[Option[Long]](__obj.idRaces, targetNamespace, Some("idRaces"), __scope, false),
        scalaxb.toXML[Long](__obj.ID, targetNamespace, Some("ID"), __scope, false),
        scalaxb.toXML[Option[Long]](__obj.idTeam_Listing, targetNamespace, Some("idTeam_Listing"), __scope, false),
        scalaxb.toXML[Option[Long]](__obj.iExperience, targetNamespace, Some("iExperience"), __scope, false),
        scalaxb.toXML[Option[Long]](__obj.iMatchSuspended, targetNamespace, Some("iMatchSuspended"), __scope, false),
        scalaxb.toXML[Option[Long]](__obj.iNbLevelsUp, targetNamespace, Some("iNbLevelsUp"), __scope, false))


  }

  trait DefaultBbmanagerPlayerEntitySequence4Format extends scalaxb.XMLFormat[bbmanager.PlayerEntitySequence4] {
    val targetNamespace: Option[String] = Some("jcmag22.hd.free.fr/Public")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, bbmanager.PlayerEntitySequence4] = Left("don't call me.")
    
    def writes(__obj: bbmanager.PlayerEntitySequence4, __namespace: Option[String], __elementLabel: Option[String], 
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      Seq.concat(scalaxb.toXML[Option[Long]](__obj.iNumber, targetNamespace, Some("iNumber"), __scope, false),
        scalaxb.toXML[Option[Long]](__obj.iSalary, targetNamespace, Some("iSalary"), __scope, false),
        scalaxb.toXML[Option[Long]](__obj.iValue, targetNamespace, Some("iValue"), __scope, false),
        __obj.Position map { scalaxb.toXML[String](_, targetNamespace, Some("Position"), __scope, false) } getOrElse {Nil},
        __obj.strLevelUp map { scalaxb.toXML[String](_, targetNamespace, Some("strLevelUp"), __scope, false) } getOrElse {Nil},
        __obj.strName map { scalaxb.toXML[String](_, targetNamespace, Some("strName"), __scope, false) } getOrElse {Nil},
        __obj.TeamName map { scalaxb.toXML[String](_, targetNamespace, Some("TeamName"), __scope, false) } getOrElse {Nil},
        __obj.CoachName map { scalaxb.toXML[String](_, targetNamespace, Some("CoachName"), __scope, false) } getOrElse {Nil},
        __obj.CasualtyType map { scalaxb.toXML[String](_, targetNamespace, Some("CasualtyType"), __scope, false) } getOrElse {Nil},
        __obj.Skills map { scalaxb.toXML[bbmanager.ArrayOfString](_, targetNamespace, Some("Skills"), __scope, false) } getOrElse {Nil})


  }

  trait DefaultBbmanagerPlayerEntitySequence5Format extends scalaxb.XMLFormat[bbmanager.PlayerEntitySequence5] {
    val targetNamespace: Option[String] = Some("jcmag22.hd.free.fr/Public")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, bbmanager.PlayerEntitySequence5] = Left("don't call me.")
    
    def writes(__obj: bbmanager.PlayerEntitySequence5, __namespace: Option[String], __elementLabel: Option[String], 
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      __obj.BaseSkills map { scalaxb.toXML[bbmanager.ArrayOfString](_, targetNamespace, Some("BaseSkills"), __scope, false) } getOrElse {Nil}

  }
  trait DefaultBbmanagerPlayerStatsEntityFormat extends scalaxb.ElemNameParser[bbmanager.PlayerStatsEntity] {
    val targetNamespace: Option[String] = Some("jcmag22.hd.free.fr/Public")
    
    override def typeName: Option[String] = Some("PlayerStatsEntity")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[bbmanager.PlayerStatsEntity] =
      (((scalaxb.ElemName(targetNamespace, "ID")) ~ 
      (scalaxb.ElemName(targetNamespace, "XP")) ~ 
      (scalaxb.ElemName(targetNamespace, "LastMatchXP")) ~ 
      (scalaxb.ElemName(targetNamespace, "idPlayer_Listing")) ~ 
      (scalaxb.ElemName(targetNamespace, "iMatchPlayed")) ~ 
      (scalaxb.ElemName(targetNamespace, "iMVP")) ~ 
      (scalaxb.ElemName(targetNamespace, "Inflicted_iCasualties")) ~ 
      (scalaxb.ElemName(targetNamespace, "Inflicted_iCatches")) ~ 
      (scalaxb.ElemName(targetNamespace, "Inflicted_iDead")) ~ 
      (scalaxb.ElemName(targetNamespace, "Inflicted_iInjuries"))) ^^ 
        { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 => bbmanager.PlayerStatsEntitySequence1(scalaxb.fromXML[Long](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Long](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Long](p3, scalaxb.ElemName(node) :: stack),
        p4.nilOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) },
        p5.nilOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) },
        p6.nilOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) },
        p7.nilOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) },
        p8.nilOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) },
        p9.nilOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) },
        p10.nilOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) }) }) ~ 
      (((scalaxb.ElemName(targetNamespace, "Inflicted_iInterceptions")) ~ 
      (scalaxb.ElemName(targetNamespace, "Inflicted_iKO")) ~ 
      (scalaxb.ElemName(targetNamespace, "Inflicted_iMetersPassing")) ~ 
      (scalaxb.ElemName(targetNamespace, "Inflicted_iMetersRunning")) ~ 
      (scalaxb.ElemName(targetNamespace, "Inflicted_iPasses")) ~ 
      (scalaxb.ElemName(targetNamespace, "Inflicted_iStuns")) ~ 
      (scalaxb.ElemName(targetNamespace, "Inflicted_iTackles")) ~ 
      (scalaxb.ElemName(targetNamespace, "Inflicted_iTouchdowns")) ~ 
      (scalaxb.ElemName(targetNamespace, "Sustained_iCasualties")) ~ 
      (scalaxb.ElemName(targetNamespace, "Sustained_iDead"))) ^^ 
        { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 => bbmanager.PlayerStatsEntitySequence2(p1.nilOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) },
        p2.nilOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) },
        p3.nilOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) },
        p4.nilOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) },
        p5.nilOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) },
        p6.nilOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) },
        p7.nilOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) },
        p8.nilOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) },
        p9.nilOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) },
        p10.nilOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) }) }) ~ 
      (((scalaxb.ElemName(targetNamespace, "Sustained_iInjuries")) ~ 
      (scalaxb.ElemName(targetNamespace, "Sustained_iInterceptions")) ~ 
      (scalaxb.ElemName(targetNamespace, "Sustained_iKO")) ~ 
      (scalaxb.ElemName(targetNamespace, "Sustained_iStuns")) ~ 
      (scalaxb.ElemName(targetNamespace, "Sustained_iTackles"))) ^^ 
        { case p1 ~ p2 ~ p3 ~ p4 ~ p5 => bbmanager.PlayerStatsEntitySequence3(p1.nilOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) },
        p2.nilOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) },
        p3.nilOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) },
        p4.nilOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) },
        p5.nilOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) }) }) ^^
      { case p1 ~ p2 ~ p3 =>
      bbmanager.PlayerStatsEntity(p1,
        p2,
        p3) }
    
    def writesChildNodes(__obj: bbmanager.PlayerStatsEntity, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[bbmanager.PlayerStatsEntitySequence1](__obj.playerstatsentitysequence1, None, Some("playerstatsentitysequence1"), __scope, false),
        scalaxb.toXML[bbmanager.PlayerStatsEntitySequence2](__obj.playerstatsentitysequence2, None, Some("playerstatsentitysequence2"), __scope, false),
        scalaxb.toXML[bbmanager.PlayerStatsEntitySequence3](__obj.playerstatsentitysequence3, None, Some("playerstatsentitysequence3"), __scope, false))

  }

  trait DefaultBbmanagerPlayerStatsEntitySequence1Format extends scalaxb.XMLFormat[bbmanager.PlayerStatsEntitySequence1] {
    val targetNamespace: Option[String] = Some("jcmag22.hd.free.fr/Public")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, bbmanager.PlayerStatsEntitySequence1] = Left("don't call me.")
    
    def writes(__obj: bbmanager.PlayerStatsEntitySequence1, __namespace: Option[String], __elementLabel: Option[String], 
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      Seq.concat(scalaxb.toXML[Long](__obj.ID, targetNamespace, Some("ID"), __scope, false),
        scalaxb.toXML[Long](__obj.XP, targetNamespace, Some("XP"), __scope, false),
        scalaxb.toXML[Long](__obj.LastMatchXP, targetNamespace, Some("LastMatchXP"), __scope, false),
        scalaxb.toXML[Option[Long]](__obj.idPlayer_Listing, targetNamespace, Some("idPlayer_Listing"), __scope, false),
        scalaxb.toXML[Option[Long]](__obj.iMatchPlayed, targetNamespace, Some("iMatchPlayed"), __scope, false),
        scalaxb.toXML[Option[Long]](__obj.iMVP, targetNamespace, Some("iMVP"), __scope, false),
        scalaxb.toXML[Option[Long]](__obj.Inflicted_iCasualties, targetNamespace, Some("Inflicted_iCasualties"), __scope, false),
        scalaxb.toXML[Option[Long]](__obj.Inflicted_iCatches, targetNamespace, Some("Inflicted_iCatches"), __scope, false),
        scalaxb.toXML[Option[Long]](__obj.Inflicted_iDead, targetNamespace, Some("Inflicted_iDead"), __scope, false),
        scalaxb.toXML[Option[Long]](__obj.Inflicted_iInjuries, targetNamespace, Some("Inflicted_iInjuries"), __scope, false))


  }

  trait DefaultBbmanagerPlayerStatsEntitySequence2Format extends scalaxb.XMLFormat[bbmanager.PlayerStatsEntitySequence2] {
    val targetNamespace: Option[String] = Some("jcmag22.hd.free.fr/Public")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, bbmanager.PlayerStatsEntitySequence2] = Left("don't call me.")
    
    def writes(__obj: bbmanager.PlayerStatsEntitySequence2, __namespace: Option[String], __elementLabel: Option[String], 
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      Seq.concat(scalaxb.toXML[Option[Long]](__obj.Inflicted_iInterceptions, targetNamespace, Some("Inflicted_iInterceptions"), __scope, false),
        scalaxb.toXML[Option[Long]](__obj.Inflicted_iKO, targetNamespace, Some("Inflicted_iKO"), __scope, false),
        scalaxb.toXML[Option[Long]](__obj.Inflicted_iMetersPassing, targetNamespace, Some("Inflicted_iMetersPassing"), __scope, false),
        scalaxb.toXML[Option[Long]](__obj.Inflicted_iMetersRunning, targetNamespace, Some("Inflicted_iMetersRunning"), __scope, false),
        scalaxb.toXML[Option[Long]](__obj.Inflicted_iPasses, targetNamespace, Some("Inflicted_iPasses"), __scope, false),
        scalaxb.toXML[Option[Long]](__obj.Inflicted_iStuns, targetNamespace, Some("Inflicted_iStuns"), __scope, false),
        scalaxb.toXML[Option[Long]](__obj.Inflicted_iTackles, targetNamespace, Some("Inflicted_iTackles"), __scope, false),
        scalaxb.toXML[Option[Long]](__obj.Inflicted_iTouchdowns, targetNamespace, Some("Inflicted_iTouchdowns"), __scope, false),
        scalaxb.toXML[Option[Long]](__obj.Sustained_iCasualties, targetNamespace, Some("Sustained_iCasualties"), __scope, false),
        scalaxb.toXML[Option[Long]](__obj.Sustained_iDead, targetNamespace, Some("Sustained_iDead"), __scope, false))


  }

  trait DefaultBbmanagerPlayerStatsEntitySequence3Format extends scalaxb.XMLFormat[bbmanager.PlayerStatsEntitySequence3] {
    val targetNamespace: Option[String] = Some("jcmag22.hd.free.fr/Public")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, bbmanager.PlayerStatsEntitySequence3] = Left("don't call me.")
    
    def writes(__obj: bbmanager.PlayerStatsEntitySequence3, __namespace: Option[String], __elementLabel: Option[String], 
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      Seq.concat(scalaxb.toXML[Option[Long]](__obj.Sustained_iInjuries, targetNamespace, Some("Sustained_iInjuries"), __scope, false),
        scalaxb.toXML[Option[Long]](__obj.Sustained_iInterceptions, targetNamespace, Some("Sustained_iInterceptions"), __scope, false),
        scalaxb.toXML[Option[Long]](__obj.Sustained_iKO, targetNamespace, Some("Sustained_iKO"), __scope, false),
        scalaxb.toXML[Option[Long]](__obj.Sustained_iStuns, targetNamespace, Some("Sustained_iStuns"), __scope, false),
        scalaxb.toXML[Option[Long]](__obj.Sustained_iTackles, targetNamespace, Some("Sustained_iTackles"), __scope, false))


  }

  trait DefaultBbmanagerArrayOfTeamEntityFormat extends scalaxb.ElemNameParser[bbmanager.ArrayOfTeamEntity] {
    val targetNamespace: Option[String] = Some("jcmag22.hd.free.fr/Public")
    
    override def typeName: Option[String] = Some("ArrayOfTeamEntity")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[bbmanager.ArrayOfTeamEntity] =
      rep(scalaxb.ElemName(targetNamespace, "TeamEntity")) ^^
      { case p1 =>
      bbmanager.ArrayOfTeamEntity(p1.toSeq map { _.nilOption map { scalaxb.fromXML[bbmanager.TeamEntity](_, scalaxb.ElemName(node) :: stack) }}: _*) }
    
    def writesChildNodes(__obj: bbmanager.ArrayOfTeamEntity, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.TeamEntity flatMap { scalaxb.toXML[Option[bbmanager.TeamEntity]](_, targetNamespace, Some("TeamEntity"), __scope, false) })
  }

  trait DefaultBbmanagerTeamEntityFormat extends scalaxb.ElemNameParser[bbmanager.TeamEntity] {
    val targetNamespace: Option[String] = Some("jcmag22.hd.free.fr/Public")
    
    override def typeName: Option[String] = Some("TeamEntity")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[bbmanager.TeamEntity] =
      ((opt(scalaxb.ElemName(targetNamespace, "Name")) ~ 
      opt(scalaxb.ElemName(targetNamespace, "CoachName")) ~ 
      (scalaxb.ElemName(targetNamespace, "RaceId")) ~ 
      (scalaxb.ElemName(targetNamespace, "SustainedTD")) ~ 
      (scalaxb.ElemName(targetNamespace, "LeaguePoints")) ~ 
      (scalaxb.ElemName(targetNamespace, "LeagueMatchs")) ~ 
      (scalaxb.ElemName(targetNamespace, "LeagueVictories")) ~ 
      (scalaxb.ElemName(targetNamespace, "LeagueDraws")) ~ 
      (scalaxb.ElemName(targetNamespace, "LeagueDefeats")) ~ 
      (scalaxb.ElemName(targetNamespace, "LeagueXP"))) ^^ 
        { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 => bbmanager.TeamEntitySequence1(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[Int](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Int](p4, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Int](p5, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Int](p6, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Int](p7, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Int](p8, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Int](p9, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Int](p10, scalaxb.ElemName(node) :: stack)) }) ~ 
      (((scalaxb.ElemName(targetNamespace, "LeagueTD")) ~ 
      (scalaxb.ElemName(targetNamespace, "LeaguePasses")) ~ 
      (scalaxb.ElemName(targetNamespace, "LeagueRecep")) ~ 
      (scalaxb.ElemName(targetNamespace, "LeagueIntercep")) ~ 
      (scalaxb.ElemName(targetNamespace, "LeagueKO")) ~ 
      (scalaxb.ElemName(targetNamespace, "LeagueBlessures")) ~ 
      (scalaxb.ElemName(targetNamespace, "LeagueMisesAuSol")) ~ 
      (scalaxb.ElemName(targetNamespace, "LeagueDeads")) ~ 
      (scalaxb.ElemName(targetNamespace, "LeagueYardCourse")) ~ 
      (scalaxb.ElemName(targetNamespace, "LeagueYardPasse"))) ^^ 
        { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 => bbmanager.TeamEntitySequence2(scalaxb.fromXML[Long](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Long](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Long](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Long](p4, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Long](p5, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Long](p6, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Long](p7, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Long](p8, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Long](p9, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Long](p10, scalaxb.ElemName(node) :: stack)) }) ~ 
      (((scalaxb.ElemName(targetNamespace, "LeagueSustainedMisesAuSol")) ~ 
      (scalaxb.ElemName(targetNamespace, "bApothecary")) ~ 
      (scalaxb.ElemName(targetNamespace, "iCash")) ~ 
      (scalaxb.ElemName(targetNamespace, "iCheerleaders")) ~ 
      opt(scalaxb.ElemName(targetNamespace, "strBackground")) ~ 
      opt(scalaxb.ElemName(targetNamespace, "strLeitmotiv")) ~ 
      (scalaxb.ElemName(targetNamespace, "iPopularity")) ~ 
      (scalaxb.ElemName(targetNamespace, "iRerolls")) ~ 
      (scalaxb.ElemName(targetNamespace, "iValue")) ~ 
      opt(scalaxb.ElemName(targetNamespace, "ListTV"))) ^^ 
        { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 => bbmanager.TeamEntitySequence3(scalaxb.fromXML[Long](p1, scalaxb.ElemName(node) :: stack),
        p2.nilOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) },
        p3.nilOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) },
        p4.nilOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p7.nilOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) },
        p8.nilOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) },
        p9.nilOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[bbmanager.ArrayOfLong](_, scalaxb.ElemName(node) :: stack) }) }) ~ 
      ((opt(scalaxb.ElemName(targetNamespace, "ListXP"))) ^^ 
        { case p1 => bbmanager.TeamEntitySequence4(p1.headOption map { scalaxb.fromXML[bbmanager.ArrayOfLong](_, scalaxb.ElemName(node) :: stack) }) }) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      bbmanager.TeamEntity(p1,
        p2,
        p3,
        p4) }
    
    def writesChildNodes(__obj: bbmanager.TeamEntity, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[bbmanager.TeamEntitySequence1](__obj.teamentitysequence1, None, Some("teamentitysequence1"), __scope, false),
        scalaxb.toXML[bbmanager.TeamEntitySequence2](__obj.teamentitysequence2, None, Some("teamentitysequence2"), __scope, false),
        scalaxb.toXML[bbmanager.TeamEntitySequence3](__obj.teamentitysequence3, None, Some("teamentitysequence3"), __scope, false),
        scalaxb.toXML[bbmanager.TeamEntitySequence4](__obj.teamentitysequence4, None, Some("teamentitysequence4"), __scope, false))

  }

  trait DefaultBbmanagerTeamEntitySequence1Format extends scalaxb.XMLFormat[bbmanager.TeamEntitySequence1] {
    val targetNamespace: Option[String] = Some("jcmag22.hd.free.fr/Public")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, bbmanager.TeamEntitySequence1] = Left("don't call me.")
    
    def writes(__obj: bbmanager.TeamEntitySequence1, __namespace: Option[String], __elementLabel: Option[String], 
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      Seq.concat(__obj.Name map { scalaxb.toXML[String](_, targetNamespace, Some("Name"), __scope, false) } getOrElse {Nil},
        __obj.CoachName map { scalaxb.toXML[String](_, targetNamespace, Some("CoachName"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[Int](__obj.RaceId, targetNamespace, Some("RaceId"), __scope, false),
        scalaxb.toXML[Int](__obj.SustainedTD, targetNamespace, Some("SustainedTD"), __scope, false),
        scalaxb.toXML[Int](__obj.LeaguePoints, targetNamespace, Some("LeaguePoints"), __scope, false),
        scalaxb.toXML[Int](__obj.LeagueMatchs, targetNamespace, Some("LeagueMatchs"), __scope, false),
        scalaxb.toXML[Int](__obj.LeagueVictories, targetNamespace, Some("LeagueVictories"), __scope, false),
        scalaxb.toXML[Int](__obj.LeagueDraws, targetNamespace, Some("LeagueDraws"), __scope, false),
        scalaxb.toXML[Int](__obj.LeagueDefeats, targetNamespace, Some("LeagueDefeats"), __scope, false),
        scalaxb.toXML[Int](__obj.LeagueXP, targetNamespace, Some("LeagueXP"), __scope, false))


  }

  trait DefaultBbmanagerTeamEntitySequence2Format extends scalaxb.XMLFormat[bbmanager.TeamEntitySequence2] {
    val targetNamespace: Option[String] = Some("jcmag22.hd.free.fr/Public")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, bbmanager.TeamEntitySequence2] = Left("don't call me.")
    
    def writes(__obj: bbmanager.TeamEntitySequence2, __namespace: Option[String], __elementLabel: Option[String], 
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      Seq.concat(scalaxb.toXML[Long](__obj.LeagueTD, targetNamespace, Some("LeagueTD"), __scope, false),
        scalaxb.toXML[Long](__obj.LeaguePasses, targetNamespace, Some("LeaguePasses"), __scope, false),
        scalaxb.toXML[Long](__obj.LeagueRecep, targetNamespace, Some("LeagueRecep"), __scope, false),
        scalaxb.toXML[Long](__obj.LeagueIntercep, targetNamespace, Some("LeagueIntercep"), __scope, false),
        scalaxb.toXML[Long](__obj.LeagueKO, targetNamespace, Some("LeagueKO"), __scope, false),
        scalaxb.toXML[Long](__obj.LeagueBlessures, targetNamespace, Some("LeagueBlessures"), __scope, false),
        scalaxb.toXML[Long](__obj.LeagueMisesAuSol, targetNamespace, Some("LeagueMisesAuSol"), __scope, false),
        scalaxb.toXML[Long](__obj.LeagueDeads, targetNamespace, Some("LeagueDeads"), __scope, false),
        scalaxb.toXML[Long](__obj.LeagueYardCourse, targetNamespace, Some("LeagueYardCourse"), __scope, false),
        scalaxb.toXML[Long](__obj.LeagueYardPasse, targetNamespace, Some("LeagueYardPasse"), __scope, false))


  }

  trait DefaultBbmanagerTeamEntitySequence3Format extends scalaxb.XMLFormat[bbmanager.TeamEntitySequence3] {
    val targetNamespace: Option[String] = Some("jcmag22.hd.free.fr/Public")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, bbmanager.TeamEntitySequence3] = Left("don't call me.")
    
    def writes(__obj: bbmanager.TeamEntitySequence3, __namespace: Option[String], __elementLabel: Option[String], 
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      Seq.concat(scalaxb.toXML[Long](__obj.LeagueSustainedMisesAuSol, targetNamespace, Some("LeagueSustainedMisesAuSol"), __scope, false),
        scalaxb.toXML[Option[Long]](__obj.bApothecary, targetNamespace, Some("bApothecary"), __scope, false),
        scalaxb.toXML[Option[Long]](__obj.iCash, targetNamespace, Some("iCash"), __scope, false),
        scalaxb.toXML[Option[Long]](__obj.iCheerleaders, targetNamespace, Some("iCheerleaders"), __scope, false),
        __obj.strBackground map { scalaxb.toXML[String](_, targetNamespace, Some("strBackground"), __scope, false) } getOrElse {Nil},
        __obj.strLeitmotiv map { scalaxb.toXML[String](_, targetNamespace, Some("strLeitmotiv"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[Option[Long]](__obj.iPopularity, targetNamespace, Some("iPopularity"), __scope, false),
        scalaxb.toXML[Option[Long]](__obj.iRerolls, targetNamespace, Some("iRerolls"), __scope, false),
        scalaxb.toXML[Option[Long]](__obj.iValue, targetNamespace, Some("iValue"), __scope, false),
        __obj.ListTV map { scalaxb.toXML[bbmanager.ArrayOfLong](_, targetNamespace, Some("ListTV"), __scope, false) } getOrElse {Nil})


  }

  trait DefaultBbmanagerTeamEntitySequence4Format extends scalaxb.XMLFormat[bbmanager.TeamEntitySequence4] {
    val targetNamespace: Option[String] = Some("jcmag22.hd.free.fr/Public")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, bbmanager.TeamEntitySequence4] = Left("don't call me.")
    
    def writes(__obj: bbmanager.TeamEntitySequence4, __namespace: Option[String], __elementLabel: Option[String], 
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      __obj.ListXP map { scalaxb.toXML[bbmanager.ArrayOfLong](_, targetNamespace, Some("ListXP"), __scope, false) } getOrElse {Nil}

  }
  trait DefaultBbmanagerArrayOfLongFormat extends scalaxb.ElemNameParser[bbmanager.ArrayOfLong] {
    val targetNamespace: Option[String] = Some("jcmag22.hd.free.fr/Public")
    
    override def typeName: Option[String] = Some("ArrayOfLong")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[bbmanager.ArrayOfLong] =
      rep(scalaxb.ElemName(targetNamespace, "long")) ^^
      { case p1 =>
      bbmanager.ArrayOfLong(p1.toSeq map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) }: _*) }
    
    def writesChildNodes(__obj: bbmanager.ArrayOfLong, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.long flatMap { scalaxb.toXML[Long](_, targetNamespace, Some("long"), __scope, false) })
  }

  trait DefaultBbmanagerGetPlayersInLeagueFormat extends scalaxb.ElemNameParser[bbmanager.GetPlayersInLeague] {
    val targetNamespace: Option[String] = Some("jcmag22.hd.free.fr/Public")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[bbmanager.GetPlayersInLeague] =
      (scalaxb.ElemName(targetNamespace, "leagueId")) ^^
      { case p1 =>
      bbmanager.GetPlayersInLeague(scalaxb.fromXML[Int](p1, scalaxb.ElemName(node) :: stack)) }
    
    def writesChildNodes(__obj: bbmanager.GetPlayersInLeague, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[Int](__obj.leagueId, targetNamespace, Some("leagueId"), __scope, false))
  }
  trait DefaultBbmanagerGetPlayersInLeagueResponseFormat extends scalaxb.ElemNameParser[bbmanager.GetPlayersInLeagueResponse] {
    val targetNamespace: Option[String] = Some("jcmag22.hd.free.fr/Public")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[bbmanager.GetPlayersInLeagueResponse] =
      opt(scalaxb.ElemName(targetNamespace, "GetPlayersInLeagueResult")) ^^
      { case p1 =>
      bbmanager.GetPlayersInLeagueResponse(p1.headOption map { scalaxb.fromXML[bbmanager.ArrayOfPlayerEntity](_, scalaxb.ElemName(node) :: stack) }) }
    
    def writesChildNodes(__obj: bbmanager.GetPlayersInLeagueResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.GetPlayersInLeagueResult map { scalaxb.toXML[bbmanager.ArrayOfPlayerEntity](_, targetNamespace, Some("GetPlayersInLeagueResult"), __scope, false) } getOrElse {Nil})
  }
  trait DefaultBbmanagerGetReplayDataFormat extends scalaxb.ElemNameParser[bbmanager.GetReplayData] {
    val targetNamespace: Option[String] = Some("jcmag22.hd.free.fr/Public")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[bbmanager.GetReplayData] =
      (scalaxb.ElemName(targetNamespace, "matchId")) ^^
      { case p1 =>
      bbmanager.GetReplayData(scalaxb.fromXML[Int](p1, scalaxb.ElemName(node) :: stack)) }
    
    def writesChildNodes(__obj: bbmanager.GetReplayData, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[Int](__obj.matchId, targetNamespace, Some("matchId"), __scope, false))
  }
  trait DefaultBbmanagerGetReplayDataResponseFormat extends scalaxb.ElemNameParser[bbmanager.GetReplayDataResponse] {
    val targetNamespace: Option[String] = Some("jcmag22.hd.free.fr/Public")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[bbmanager.GetReplayDataResponse] =
      opt(scalaxb.ElemName(targetNamespace, "homeSkillsEntityList")) ~ 
      opt(scalaxb.ElemName(targetNamespace, "awaySkillsEntityList")) ~ 
      opt(scalaxb.ElemName(targetNamespace, "netCommandList")) ~ 
      opt(scalaxb.ElemName(targetNamespace, "homePlayerListing")) ~ 
      opt(scalaxb.ElemName(targetNamespace, "awayPlayerListing")) ~ 
      opt(scalaxb.ElemName(targetNamespace, "log")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      bbmanager.GetReplayDataResponse(p1.headOption map { scalaxb.fromXML[bbmanager.ArrayOfPlayerSkillEntity](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[bbmanager.ArrayOfPlayerSkillEntity](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[bbmanager.ArrayOfNetCommandEntity](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[bbmanager.ArrayOfPlayerListingEntity](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[bbmanager.ArrayOfPlayerListingEntity](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) }
    
    def writesChildNodes(__obj: bbmanager.GetReplayDataResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.homeSkillsEntityList map { scalaxb.toXML[bbmanager.ArrayOfPlayerSkillEntity](_, targetNamespace, Some("homeSkillsEntityList"), __scope, false) } getOrElse {Nil},
        __obj.awaySkillsEntityList map { scalaxb.toXML[bbmanager.ArrayOfPlayerSkillEntity](_, targetNamespace, Some("awaySkillsEntityList"), __scope, false) } getOrElse {Nil},
        __obj.netCommandList map { scalaxb.toXML[bbmanager.ArrayOfNetCommandEntity](_, targetNamespace, Some("netCommandList"), __scope, false) } getOrElse {Nil},
        __obj.homePlayerListing map { scalaxb.toXML[bbmanager.ArrayOfPlayerListingEntity](_, targetNamespace, Some("homePlayerListing"), __scope, false) } getOrElse {Nil},
        __obj.awayPlayerListing map { scalaxb.toXML[bbmanager.ArrayOfPlayerListingEntity](_, targetNamespace, Some("awayPlayerListing"), __scope, false) } getOrElse {Nil},
        __obj.log map { scalaxb.toXML[String](_, targetNamespace, Some("log"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultBbmanagerArrayOfPlayerSkillEntityFormat extends scalaxb.ElemNameParser[bbmanager.ArrayOfPlayerSkillEntity] {
    val targetNamespace: Option[String] = Some("jcmag22.hd.free.fr/Public")
    
    override def typeName: Option[String] = Some("ArrayOfPlayerSkillEntity")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[bbmanager.ArrayOfPlayerSkillEntity] =
      rep(scalaxb.ElemName(targetNamespace, "PlayerSkillEntity")) ^^
      { case p1 =>
      bbmanager.ArrayOfPlayerSkillEntity(p1.toSeq map { _.nilOption map { scalaxb.fromXML[bbmanager.PlayerSkillEntity](_, scalaxb.ElemName(node) :: stack) }}: _*) }
    
    def writesChildNodes(__obj: bbmanager.ArrayOfPlayerSkillEntity, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.PlayerSkillEntity flatMap { scalaxb.toXML[Option[bbmanager.PlayerSkillEntity]](_, targetNamespace, Some("PlayerSkillEntity"), __scope, false) })
  }

  trait DefaultBbmanagerPlayerSkillEntityFormat extends scalaxb.ElemNameParser[bbmanager.PlayerSkillEntity] {
    val targetNamespace: Option[String] = Some("jcmag22.hd.free.fr/Public")
    
    override def typeName: Option[String] = Some("PlayerSkillEntity")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[bbmanager.PlayerSkillEntity] =
      (scalaxb.ElemName(targetNamespace, "ID")) ~ 
      (scalaxb.ElemName(targetNamespace, "idPlayer_Listing")) ~ 
      (scalaxb.ElemName(targetNamespace, "idSkill_Listing")) ^^
      { case p1 ~ p2 ~ p3 =>
      bbmanager.PlayerSkillEntity(scalaxb.fromXML[Long](p1, scalaxb.ElemName(node) :: stack),
        p2.nilOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) },
        p3.nilOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) }) }
    
    def writesChildNodes(__obj: bbmanager.PlayerSkillEntity, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[Long](__obj.ID, targetNamespace, Some("ID"), __scope, false),
        scalaxb.toXML[Option[Long]](__obj.idPlayer_Listing, targetNamespace, Some("idPlayer_Listing"), __scope, false),
        scalaxb.toXML[Option[Long]](__obj.idSkill_Listing, targetNamespace, Some("idSkill_Listing"), __scope, false))

  }

  trait DefaultBbmanagerArrayOfNetCommandEntityFormat extends scalaxb.ElemNameParser[bbmanager.ArrayOfNetCommandEntity] {
    val targetNamespace: Option[String] = Some("jcmag22.hd.free.fr/Public")
    
    override def typeName: Option[String] = Some("ArrayOfNetCommandEntity")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[bbmanager.ArrayOfNetCommandEntity] =
      rep(scalaxb.ElemName(targetNamespace, "NetCommandEntity")) ^^
      { case p1 =>
      bbmanager.ArrayOfNetCommandEntity(p1.toSeq map { _.nilOption map { scalaxb.fromXML[bbmanager.NetCommandEntity](_, scalaxb.ElemName(node) :: stack) }}: _*) }
    
    def writesChildNodes(__obj: bbmanager.ArrayOfNetCommandEntity, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.NetCommandEntity flatMap { scalaxb.toXML[Option[bbmanager.NetCommandEntity]](_, targetNamespace, Some("NetCommandEntity"), __scope, false) })
  }

  trait DefaultBbmanagerNetCommandEntityFormat extends scalaxb.ElemNameParser[bbmanager.NetCommandEntity] {
    val targetNamespace: Option[String] = Some("jcmag22.hd.free.fr/Public")
    
    override def typeName: Option[String] = Some("NetCommandEntity")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[bbmanager.NetCommandEntity] =
      (scalaxb.ElemName(targetNamespace, "ID")) ~ 
      (scalaxb.ElemName(targetNamespace, "iPart1")) ~ 
      (scalaxb.ElemName(targetNamespace, "iPart2")) ~ 
      (scalaxb.ElemName(targetNamespace, "iPart3")) ~ 
      (scalaxb.ElemName(targetNamespace, "iPart4")) ~ 
      (scalaxb.ElemName(targetNamespace, "iPart5")) ~ 
      (scalaxb.ElemName(targetNamespace, "iPart6")) ~ 
      (scalaxb.ElemName(targetNamespace, "iPart7")) ~ 
      (scalaxb.ElemName(targetNamespace, "iPart8")) ~ 
      (scalaxb.ElemName(targetNamespace, "iPart9")) ~ 
      (scalaxb.ElemName(targetNamespace, "iPart10")) ~ 
      (scalaxb.ElemName(targetNamespace, "iPart11")) ~ 
      (scalaxb.ElemName(targetNamespace, "iPart12")) ~ 
      (scalaxb.ElemName(targetNamespace, "iPlayerIndex")) ~ 
      (scalaxb.ElemName(targetNamespace, "iTurn")) ~ 
      (scalaxb.ElemName(targetNamespace, "iType")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 =>
      bbmanager.NetCommandEntity(scalaxb.fromXML[Long](p1, scalaxb.ElemName(node) :: stack),
        p2.nilOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) },
        p3.nilOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) },
        p4.nilOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) },
        p5.nilOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) },
        p6.nilOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) },
        p7.nilOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) },
        p8.nilOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) },
        p9.nilOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) },
        p10.nilOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) },
        p11.nilOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) },
        p12.nilOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) },
        p13.nilOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) },
        p14.nilOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) },
        p15.nilOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) },
        p16.nilOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) }) }
    
    def writesChildNodes(__obj: bbmanager.NetCommandEntity, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[Long](__obj.ID, targetNamespace, Some("ID"), __scope, false),
        scalaxb.toXML[Option[Long]](__obj.iPart1, targetNamespace, Some("iPart1"), __scope, false),
        scalaxb.toXML[Option[Long]](__obj.iPart2, targetNamespace, Some("iPart2"), __scope, false),
        scalaxb.toXML[Option[Long]](__obj.iPart3, targetNamespace, Some("iPart3"), __scope, false),
        scalaxb.toXML[Option[Long]](__obj.iPart4, targetNamespace, Some("iPart4"), __scope, false),
        scalaxb.toXML[Option[Long]](__obj.iPart5, targetNamespace, Some("iPart5"), __scope, false),
        scalaxb.toXML[Option[Long]](__obj.iPart6, targetNamespace, Some("iPart6"), __scope, false),
        scalaxb.toXML[Option[Long]](__obj.iPart7, targetNamespace, Some("iPart7"), __scope, false),
        scalaxb.toXML[Option[Long]](__obj.iPart8, targetNamespace, Some("iPart8"), __scope, false),
        scalaxb.toXML[Option[Long]](__obj.iPart9, targetNamespace, Some("iPart9"), __scope, false),
        scalaxb.toXML[Option[Long]](__obj.iPart10, targetNamespace, Some("iPart10"), __scope, false),
        scalaxb.toXML[Option[Long]](__obj.iPart11, targetNamespace, Some("iPart11"), __scope, false),
        scalaxb.toXML[Option[Long]](__obj.iPart12, targetNamespace, Some("iPart12"), __scope, false),
        scalaxb.toXML[Option[Long]](__obj.iPlayerIndex, targetNamespace, Some("iPlayerIndex"), __scope, false),
        scalaxb.toXML[Option[Long]](__obj.iTurn, targetNamespace, Some("iTurn"), __scope, false),
        scalaxb.toXML[Option[Long]](__obj.iType, targetNamespace, Some("iType"), __scope, false))

  }

  trait DefaultBbmanagerArrayOfPlayerListingEntityFormat extends scalaxb.ElemNameParser[bbmanager.ArrayOfPlayerListingEntity] {
    val targetNamespace: Option[String] = Some("jcmag22.hd.free.fr/Public")
    
    override def typeName: Option[String] = Some("ArrayOfPlayerListingEntity")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[bbmanager.ArrayOfPlayerListingEntity] =
      rep(scalaxb.ElemName(targetNamespace, "PlayerListingEntity")) ^^
      { case p1 =>
      bbmanager.ArrayOfPlayerListingEntity(p1.toSeq map { _.nilOption map { scalaxb.fromXML[bbmanager.PlayerListingEntity](_, scalaxb.ElemName(node) :: stack) }}: _*) }
    
    def writesChildNodes(__obj: bbmanager.ArrayOfPlayerListingEntity, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.PlayerListingEntity flatMap { scalaxb.toXML[Option[bbmanager.PlayerListingEntity]](_, targetNamespace, Some("PlayerListingEntity"), __scope, false) })
  }

  trait DefaultBbmanagerPlayerListingEntityFormat extends scalaxb.ElemNameParser[bbmanager.PlayerListingEntity] {
    val targetNamespace: Option[String] = Some("jcmag22.hd.free.fr/Public")
    
    override def typeName: Option[String] = Some("PlayerListingEntity")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[bbmanager.PlayerListingEntity] =
      (scalaxb.ElemName(targetNamespace, "ID")) ~ 
      (scalaxb.ElemName(targetNamespace, "idPlayer_Names")) ~ 
      opt(scalaxb.ElemName(targetNamespace, "strName")) ~ 
      (scalaxb.ElemName(targetNamespace, "idPlayer_Types")) ~ 
      (scalaxb.ElemName(targetNamespace, "idRaces")) ~ 
      (scalaxb.ElemName(targetNamespace, "iNumber")) ~ 
      (scalaxb.ElemName(targetNamespace, "iMatchSuspended")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 =>
      bbmanager.PlayerListingEntity(scalaxb.fromXML[Long](p1, scalaxb.ElemName(node) :: stack),
        p2.nilOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.nilOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) },
        p5.nilOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) },
        p6.nilOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) },
        p7.nilOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) }) }
    
    def writesChildNodes(__obj: bbmanager.PlayerListingEntity, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[Long](__obj.ID, targetNamespace, Some("ID"), __scope, false),
        scalaxb.toXML[Option[Long]](__obj.idPlayer_Names, targetNamespace, Some("idPlayer_Names"), __scope, false),
        __obj.strName map { scalaxb.toXML[String](_, targetNamespace, Some("strName"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[Option[Long]](__obj.idPlayer_Types, targetNamespace, Some("idPlayer_Types"), __scope, false),
        scalaxb.toXML[Option[Long]](__obj.idRaces, targetNamespace, Some("idRaces"), __scope, false),
        scalaxb.toXML[Option[Long]](__obj.iNumber, targetNamespace, Some("iNumber"), __scope, false),
        scalaxb.toXML[Option[Long]](__obj.iMatchSuspended, targetNamespace, Some("iMatchSuspended"), __scope, false))

  }

  trait DefaultBbmanagerGetTeamPlayersFormat extends scalaxb.ElemNameParser[bbmanager.GetTeamPlayers] {
    val targetNamespace: Option[String] = Some("jcmag22.hd.free.fr/Public")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[bbmanager.GetTeamPlayers] =
      (scalaxb.ElemName(targetNamespace, "leagueId")) ~ 
      opt(scalaxb.ElemName(targetNamespace, "teamName")) ~ 
      opt(scalaxb.ElemName(targetNamespace, "language")) ^^
      { case p1 ~ p2 ~ p3 =>
      bbmanager.GetTeamPlayers(scalaxb.fromXML[Int](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) }
    
    def writesChildNodes(__obj: bbmanager.GetTeamPlayers, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[Int](__obj.leagueId, targetNamespace, Some("leagueId"), __scope, false),
        __obj.teamName map { scalaxb.toXML[String](_, targetNamespace, Some("teamName"), __scope, false) } getOrElse {Nil},
        __obj.language map { scalaxb.toXML[String](_, targetNamespace, Some("language"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultBbmanagerGetTeamPlayersResponseFormat extends scalaxb.ElemNameParser[bbmanager.GetTeamPlayersResponse] {
    val targetNamespace: Option[String] = Some("jcmag22.hd.free.fr/Public")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[bbmanager.GetTeamPlayersResponse] =
      opt(scalaxb.ElemName(targetNamespace, "groupPlayers")) ~ 
      opt(scalaxb.ElemName(targetNamespace, "groupTeams")) ^^
      { case p1 ~ p2 =>
      bbmanager.GetTeamPlayersResponse(p1.headOption map { scalaxb.fromXML[bbmanager.ArrayOfPlayerEntity](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[bbmanager.ArrayOfTeamEntity](_, scalaxb.ElemName(node) :: stack) }) }
    
    def writesChildNodes(__obj: bbmanager.GetTeamPlayersResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.groupPlayers map { scalaxb.toXML[bbmanager.ArrayOfPlayerEntity](_, targetNamespace, Some("groupPlayers"), __scope, false) } getOrElse {Nil},
        __obj.groupTeams map { scalaxb.toXML[bbmanager.ArrayOfTeamEntity](_, targetNamespace, Some("groupTeams"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultBbmanagerGetTeamsListingFormat extends scalaxb.ElemNameParser[bbmanager.GetTeamsListing] {
    val targetNamespace: Option[String] = Some("jcmag22.hd.free.fr/Public")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[bbmanager.GetTeamsListing] =
      (scalaxb.ElemName(targetNamespace, "matchId")) ^^
      { case p1 =>
      bbmanager.GetTeamsListing(scalaxb.fromXML[Int](p1, scalaxb.ElemName(node) :: stack)) }
    
    def writesChildNodes(__obj: bbmanager.GetTeamsListing, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[Int](__obj.matchId, targetNamespace, Some("matchId"), __scope, false))
  }
  trait DefaultBbmanagerGetTeamsListingResponseFormat extends scalaxb.ElemNameParser[bbmanager.GetTeamsListingResponse] {
    val targetNamespace: Option[String] = Some("jcmag22.hd.free.fr/Public")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[bbmanager.GetTeamsListingResponse] =
      opt(scalaxb.ElemName(targetNamespace, "homeTeam")) ~ 
      opt(scalaxb.ElemName(targetNamespace, "awayTeam")) ^^
      { case p1 ~ p2 =>
      bbmanager.GetTeamsListingResponse(p1.headOption map { scalaxb.fromXML[bbmanager.Home_Team_Listing](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[bbmanager.Away_Team_Listing](_, scalaxb.ElemName(node) :: stack) }) }
    
    def writesChildNodes(__obj: bbmanager.GetTeamsListingResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.homeTeam map { scalaxb.toXML[bbmanager.Home_Team_Listing](_, targetNamespace, Some("homeTeam"), __scope, false) } getOrElse {Nil},
        __obj.awayTeam map { scalaxb.toXML[bbmanager.Away_Team_Listing](_, targetNamespace, Some("awayTeam"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultBbmanagerHome_Team_ListingFormat extends scalaxb.ElemNameParser[bbmanager.Home_Team_Listing] {
    val targetNamespace: Option[String] = Some("jcmag22.hd.free.fr/Public")
    
    override def typeName: Option[String] = Some("Home_Team_Listing")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[bbmanager.Home_Team_Listing] =
      opt(scalaxb.ElemName(targetNamespace, "EntityKey")) ~ 
      (scalaxb.ElemName(targetNamespace, "ID")) ~ 
      opt(scalaxb.ElemName(targetNamespace, "strName")) ~ 
      (scalaxb.ElemName(targetNamespace, "idRaces")) ~ 
      opt(scalaxb.ElemName(targetNamespace, "strLogo")) ~ 
      (scalaxb.ElemName(targetNamespace, "iTeamColor")) ~ 
      opt(scalaxb.ElemName(targetNamespace, "strLeitmotiv")) ~ 
      opt(scalaxb.ElemName(targetNamespace, "strBackground")) ~ 
      (scalaxb.ElemName(targetNamespace, "iValue")) ~ 
      (scalaxb.ElemName(targetNamespace, "iPopularity")) ~ 
      (scalaxb.ElemName(targetNamespace, "iCash")) ~ 
      (scalaxb.ElemName(targetNamespace, "iCheerleaders")) ~ 
      (scalaxb.ElemName(targetNamespace, "iBalms")) ~ 
      (scalaxb.ElemName(targetNamespace, "bApothecary")) ~ 
      (scalaxb.ElemName(targetNamespace, "iRerolls")) ~ 
      (scalaxb.ElemName(targetNamespace, "bEdited")) ~ 
      (scalaxb.ElemName(targetNamespace, "idTeam_Listing_Filters")) ~ 
      (scalaxb.ElemName(targetNamespace, "idStrings_Formatted_Background")) ~ 
      (scalaxb.ElemName(targetNamespace, "idStrings_Localized_Leitmotiv")) ~ 
      (scalaxb.ElemName(targetNamespace, "iNextPurchase")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 =>
      bbmanager.Home_Team_Listing(p1.headOption map { scalaxb.fromXML[bbmanager.EntityKey](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[Long](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.nilOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.nilOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p9.nilOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) },
        p10.nilOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) },
        p11.nilOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) },
        p12.nilOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) },
        p13.nilOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) },
        p14.nilOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) },
        p15.nilOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) },
        p16.nilOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) },
        p17.nilOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) },
        p18.nilOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) },
        p19.nilOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) },
        p20.nilOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) }) }
    
    def writesChildNodes(__obj: bbmanager.Home_Team_Listing, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.EntityKey map { scalaxb.toXML[bbmanager.EntityKey](_, targetNamespace, Some("EntityKey"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[Long](__obj.ID, targetNamespace, Some("ID"), __scope, false),
        __obj.strName map { scalaxb.toXML[String](_, targetNamespace, Some("strName"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[Option[Long]](__obj.idRaces, targetNamespace, Some("idRaces"), __scope, false),
        __obj.strLogo map { scalaxb.toXML[String](_, targetNamespace, Some("strLogo"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[Option[Long]](__obj.iTeamColor, targetNamespace, Some("iTeamColor"), __scope, false),
        __obj.strLeitmotiv map { scalaxb.toXML[String](_, targetNamespace, Some("strLeitmotiv"), __scope, false) } getOrElse {Nil},
        __obj.strBackground map { scalaxb.toXML[String](_, targetNamespace, Some("strBackground"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[Option[Long]](__obj.iValue, targetNamespace, Some("iValue"), __scope, false),
        scalaxb.toXML[Option[Long]](__obj.iPopularity, targetNamespace, Some("iPopularity"), __scope, false),
        scalaxb.toXML[Option[Long]](__obj.iCash, targetNamespace, Some("iCash"), __scope, false),
        scalaxb.toXML[Option[Long]](__obj.iCheerleaders, targetNamespace, Some("iCheerleaders"), __scope, false),
        scalaxb.toXML[Option[Long]](__obj.iBalms, targetNamespace, Some("iBalms"), __scope, false),
        scalaxb.toXML[Option[Long]](__obj.bApothecary, targetNamespace, Some("bApothecary"), __scope, false),
        scalaxb.toXML[Option[Long]](__obj.iRerolls, targetNamespace, Some("iRerolls"), __scope, false),
        scalaxb.toXML[Option[Long]](__obj.bEdited, targetNamespace, Some("bEdited"), __scope, false),
        scalaxb.toXML[Option[Long]](__obj.idTeam_Listing_Filters, targetNamespace, Some("idTeam_Listing_Filters"), __scope, false),
        scalaxb.toXML[Option[Long]](__obj.idStrings_Formatted_Background, targetNamespace, Some("idStrings_Formatted_Background"), __scope, false),
        scalaxb.toXML[Option[Long]](__obj.idStrings_Localized_Leitmotiv, targetNamespace, Some("idStrings_Localized_Leitmotiv"), __scope, false),
        scalaxb.toXML[Option[Long]](__obj.iNextPurchase, targetNamespace, Some("iNextPurchase"), __scope, false))

  }

  trait DefaultBbmanagerEntityObjectFormat extends scalaxb.XMLFormat[bbmanager.EntityObject] {
    val targetNamespace: Option[String] = Some("jcmag22.hd.free.fr/Public")
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, bbmanager.EntityObject] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (targetNamespace, Some("Home_Team_Listing")) => Right(scalaxb.fromXML[bbmanager.Home_Team_Listing](node, stack))
          case (targetNamespace, Some("Away_Team_Listing")) => Right(scalaxb.fromXML[bbmanager.Away_Team_Listing](node, stack))
          case x => Left("Unknown type: " + x)
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: bbmanager.EntityObject, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: bbmanager.Home_Team_Listing => scalaxb.toXML[bbmanager.Home_Team_Listing](x, __namespace, __elementLabel, __scope, true)
      case x: bbmanager.Away_Team_Listing => scalaxb.toXML[bbmanager.Away_Team_Listing](x, __namespace, __elementLabel, __scope, true)
      case _ => error("Unknown type: " + __obj)
    }
  }

  trait DefaultBbmanagerStructuralObjectFormat extends scalaxb.XMLFormat[bbmanager.StructuralObject] {
    val targetNamespace: Option[String] = Some("jcmag22.hd.free.fr/Public")
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, bbmanager.StructuralObject] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (targetNamespace, Some("EntityObject")) => Right(scalaxb.fromXML[bbmanager.EntityObject](node, stack))
          case x => Left("Unknown type: " + x)
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: bbmanager.StructuralObject, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: bbmanager.EntityObject => scalaxb.toXML[bbmanager.EntityObject](x, __namespace, __elementLabel, __scope, true)
      case _ => error("Unknown type: " + __obj)
    }
  }
  trait DefaultBbmanagerEntityKeyFormat extends scalaxb.ElemNameParser[bbmanager.EntityKey] {
    val targetNamespace: Option[String] = Some("jcmag22.hd.free.fr/Public")
    
    override def typeName: Option[String] = Some("EntityKey")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[bbmanager.EntityKey] =
      opt(scalaxb.ElemName(targetNamespace, "EntitySetName")) ~ 
      opt(scalaxb.ElemName(targetNamespace, "EntityContainerName")) ~ 
      opt(scalaxb.ElemName(targetNamespace, "EntityKeyValues")) ^^
      { case p1 ~ p2 ~ p3 =>
      bbmanager.EntityKey(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[bbmanager.ArrayOfEntityKeyMember](_, scalaxb.ElemName(node) :: stack) }) }
    
    def writesChildNodes(__obj: bbmanager.EntityKey, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.EntitySetName map { scalaxb.toXML[String](_, targetNamespace, Some("EntitySetName"), __scope, false) } getOrElse {Nil},
        __obj.EntityContainerName map { scalaxb.toXML[String](_, targetNamespace, Some("EntityContainerName"), __scope, false) } getOrElse {Nil},
        __obj.EntityKeyValues map { scalaxb.toXML[bbmanager.ArrayOfEntityKeyMember](_, targetNamespace, Some("EntityKeyValues"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultBbmanagerArrayOfEntityKeyMemberFormat extends scalaxb.ElemNameParser[bbmanager.ArrayOfEntityKeyMember] {
    val targetNamespace: Option[String] = Some("jcmag22.hd.free.fr/Public")
    
    override def typeName: Option[String] = Some("ArrayOfEntityKeyMember")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[bbmanager.ArrayOfEntityKeyMember] =
      rep(scalaxb.ElemName(targetNamespace, "EntityKeyMember")) ^^
      { case p1 =>
      bbmanager.ArrayOfEntityKeyMember(p1.toSeq map { _.nilOption map { scalaxb.fromXML[bbmanager.EntityKeyMember](_, scalaxb.ElemName(node) :: stack) }}: _*) }
    
    def writesChildNodes(__obj: bbmanager.ArrayOfEntityKeyMember, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.EntityKeyMember flatMap { scalaxb.toXML[Option[bbmanager.EntityKeyMember]](_, targetNamespace, Some("EntityKeyMember"), __scope, false) })
  }

  trait DefaultBbmanagerEntityKeyMemberFormat extends scalaxb.ElemNameParser[bbmanager.EntityKeyMember] {
    val targetNamespace: Option[String] = Some("jcmag22.hd.free.fr/Public")
    
    override def typeName: Option[String] = Some("EntityKeyMember")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[bbmanager.EntityKeyMember] =
      opt(scalaxb.ElemName(targetNamespace, "Key")) ~ 
      opt(any(_ => true)) ^^
      { case p1 ~ p2 =>
      bbmanager.EntityKeyMember(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[scalaxb.DataRecord[Any]](_, scalaxb.ElemName(node) :: stack) }) }
    
    def writesChildNodes(__obj: bbmanager.EntityKeyMember, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Key map { scalaxb.toXML[String](_, targetNamespace, Some("Key"), __scope, false) } getOrElse {Nil},
        __obj.Value map { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, true) } getOrElse {Nil})

  }

  trait DefaultBbmanagerAway_Team_ListingFormat extends scalaxb.ElemNameParser[bbmanager.Away_Team_Listing] {
    val targetNamespace: Option[String] = Some("jcmag22.hd.free.fr/Public")
    
    override def typeName: Option[String] = Some("Away_Team_Listing")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[bbmanager.Away_Team_Listing] =
      opt(scalaxb.ElemName(targetNamespace, "EntityKey")) ~ 
      (scalaxb.ElemName(targetNamespace, "ID")) ~ 
      opt(scalaxb.ElemName(targetNamespace, "strName")) ~ 
      (scalaxb.ElemName(targetNamespace, "idRaces")) ~ 
      opt(scalaxb.ElemName(targetNamespace, "strLogo")) ~ 
      (scalaxb.ElemName(targetNamespace, "iTeamColor")) ~ 
      opt(scalaxb.ElemName(targetNamespace, "strLeitmotiv")) ~ 
      opt(scalaxb.ElemName(targetNamespace, "strBackground")) ~ 
      (scalaxb.ElemName(targetNamespace, "iValue")) ~ 
      (scalaxb.ElemName(targetNamespace, "iPopularity")) ~ 
      (scalaxb.ElemName(targetNamespace, "iCash")) ~ 
      (scalaxb.ElemName(targetNamespace, "iCheerleaders")) ~ 
      (scalaxb.ElemName(targetNamespace, "iBalms")) ~ 
      (scalaxb.ElemName(targetNamespace, "bApothecary")) ~ 
      (scalaxb.ElemName(targetNamespace, "iRerolls")) ~ 
      (scalaxb.ElemName(targetNamespace, "bEdited")) ~ 
      (scalaxb.ElemName(targetNamespace, "idTeam_Listing_Filters")) ~ 
      (scalaxb.ElemName(targetNamespace, "idStrings_Formatted_Background")) ~ 
      (scalaxb.ElemName(targetNamespace, "idStrings_Localized_Leitmotiv")) ~ 
      (scalaxb.ElemName(targetNamespace, "iNextPurchase")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 =>
      bbmanager.Away_Team_Listing(p1.headOption map { scalaxb.fromXML[bbmanager.EntityKey](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[Long](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.nilOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.nilOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p9.nilOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) },
        p10.nilOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) },
        p11.nilOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) },
        p12.nilOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) },
        p13.nilOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) },
        p14.nilOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) },
        p15.nilOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) },
        p16.nilOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) },
        p17.nilOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) },
        p18.nilOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) },
        p19.nilOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) },
        p20.nilOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) }) }
    
    def writesChildNodes(__obj: bbmanager.Away_Team_Listing, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.EntityKey map { scalaxb.toXML[bbmanager.EntityKey](_, targetNamespace, Some("EntityKey"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[Long](__obj.ID, targetNamespace, Some("ID"), __scope, false),
        __obj.strName map { scalaxb.toXML[String](_, targetNamespace, Some("strName"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[Option[Long]](__obj.idRaces, targetNamespace, Some("idRaces"), __scope, false),
        __obj.strLogo map { scalaxb.toXML[String](_, targetNamespace, Some("strLogo"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[Option[Long]](__obj.iTeamColor, targetNamespace, Some("iTeamColor"), __scope, false),
        __obj.strLeitmotiv map { scalaxb.toXML[String](_, targetNamespace, Some("strLeitmotiv"), __scope, false) } getOrElse {Nil},
        __obj.strBackground map { scalaxb.toXML[String](_, targetNamespace, Some("strBackground"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[Option[Long]](__obj.iValue, targetNamespace, Some("iValue"), __scope, false),
        scalaxb.toXML[Option[Long]](__obj.iPopularity, targetNamespace, Some("iPopularity"), __scope, false),
        scalaxb.toXML[Option[Long]](__obj.iCash, targetNamespace, Some("iCash"), __scope, false),
        scalaxb.toXML[Option[Long]](__obj.iCheerleaders, targetNamespace, Some("iCheerleaders"), __scope, false),
        scalaxb.toXML[Option[Long]](__obj.iBalms, targetNamespace, Some("iBalms"), __scope, false),
        scalaxb.toXML[Option[Long]](__obj.bApothecary, targetNamespace, Some("bApothecary"), __scope, false),
        scalaxb.toXML[Option[Long]](__obj.iRerolls, targetNamespace, Some("iRerolls"), __scope, false),
        scalaxb.toXML[Option[Long]](__obj.bEdited, targetNamespace, Some("bEdited"), __scope, false),
        scalaxb.toXML[Option[Long]](__obj.idTeam_Listing_Filters, targetNamespace, Some("idTeam_Listing_Filters"), __scope, false),
        scalaxb.toXML[Option[Long]](__obj.idStrings_Formatted_Background, targetNamespace, Some("idStrings_Formatted_Background"), __scope, false),
        scalaxb.toXML[Option[Long]](__obj.idStrings_Localized_Leitmotiv, targetNamespace, Some("idStrings_Localized_Leitmotiv"), __scope, false),
        scalaxb.toXML[Option[Long]](__obj.iNextPurchase, targetNamespace, Some("iNextPurchase"), __scope, false))

  }

  trait DefaultBbmanagerGetLeaguePlayersStatsFormat extends scalaxb.ElemNameParser[bbmanager.GetLeaguePlayersStats] {
    val targetNamespace: Option[String] = Some("jcmag22.hd.free.fr/Public")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[bbmanager.GetLeaguePlayersStats] =
      (scalaxb.ElemName(targetNamespace, "leagueId")) ~ 
      (scalaxb.ElemName(targetNamespace, "number")) ^^
      { case p1 ~ p2 =>
      bbmanager.GetLeaguePlayersStats(scalaxb.fromXML[Int](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Int](p2, scalaxb.ElemName(node) :: stack)) }
    
    def writesChildNodes(__obj: bbmanager.GetLeaguePlayersStats, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[Int](__obj.leagueId, targetNamespace, Some("leagueId"), __scope, false),
        scalaxb.toXML[Int](__obj.number, targetNamespace, Some("number"), __scope, false))

  }

  trait DefaultBbmanagerPlayerStatFormat extends scalaxb.ElemNameParser[bbmanager.PlayerStat] {
    val targetNamespace: Option[String] = Some("jcmag22.hd.free.fr/Public")
    
    override def typeName: Option[String] = Some("PlayerStat")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[bbmanager.PlayerStat] =
      (scalaxb.ElemName(targetNamespace, "Stat")) ~ 
      opt(scalaxb.ElemName(targetNamespace, "Name")) ~ 
      opt(scalaxb.ElemName(targetNamespace, "TeamName")) ~ 
      (scalaxb.ElemName(targetNamespace, "RaceId")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      bbmanager.PlayerStat(scalaxb.fromXML[Long](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[Long](p4, scalaxb.ElemName(node) :: stack)) }
    
    def writesChildNodes(__obj: bbmanager.PlayerStat, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[Long](__obj.Stat, targetNamespace, Some("Stat"), __scope, false),
        __obj.Name map { scalaxb.toXML[String](_, targetNamespace, Some("Name"), __scope, false) } getOrElse {Nil},
        __obj.TeamName map { scalaxb.toXML[String](_, targetNamespace, Some("TeamName"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[Long](__obj.RaceId, targetNamespace, Some("RaceId"), __scope, false))

  }

  trait DefaultBbmanagerArrayOfPlayerStatFormat extends scalaxb.ElemNameParser[bbmanager.ArrayOfPlayerStat] {
    val targetNamespace: Option[String] = Some("jcmag22.hd.free.fr/Public")
    
    override def typeName: Option[String] = Some("ArrayOfPlayerStat")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[bbmanager.ArrayOfPlayerStat] =
      rep(scalaxb.ElemName(targetNamespace, "PlayerStat")) ^^
      { case p1 =>
      bbmanager.ArrayOfPlayerStat(p1.toSeq map { _.nilOption map { scalaxb.fromXML[bbmanager.PlayerStat](_, scalaxb.ElemName(node) :: stack) }}: _*) }
    
    def writesChildNodes(__obj: bbmanager.ArrayOfPlayerStat, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.PlayerStat flatMap { scalaxb.toXML[Option[bbmanager.PlayerStat]](_, targetNamespace, Some("PlayerStat"), __scope, false) })
  }

  trait DefaultBbmanagerGetLeaguePlayersStatsResponseFormat extends scalaxb.ElemNameParser[bbmanager.GetLeaguePlayersStatsResponse] {
    val targetNamespace: Option[String] = Some("jcmag22.hd.free.fr/Public")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[bbmanager.GetLeaguePlayersStatsResponse] =
      opt(scalaxb.ElemName(targetNamespace, "bestTD")) ~ 
      opt(scalaxb.ElemName(targetNamespace, "bestPasse")) ~ 
      opt(scalaxb.ElemName(targetNamespace, "bestInterception")) ~ 
      opt(scalaxb.ElemName(targetNamespace, "bestCatches")) ~ 
      opt(scalaxb.ElemName(targetNamespace, "bestYardsRun")) ~ 
      opt(scalaxb.ElemName(targetNamespace, "bestYardsPass")) ~ 
      opt(scalaxb.ElemName(targetNamespace, "bestInjuries")) ~ 
      opt(scalaxb.ElemName(targetNamespace, "bestViolent")) ~ 
      opt(scalaxb.ElemName(targetNamespace, "bestKiller")) ~ 
      opt(scalaxb.ElemName(targetNamespace, "bestPreneurCoup")) ~ 
      opt(scalaxb.ElemName(targetNamespace, "bestXP")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 =>
      bbmanager.GetLeaguePlayersStatsResponse(p1.headOption map { scalaxb.fromXML[bbmanager.ArrayOfPlayerStat](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[bbmanager.ArrayOfPlayerStat](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[bbmanager.ArrayOfPlayerStat](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[bbmanager.ArrayOfPlayerStat](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[bbmanager.ArrayOfPlayerStat](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[bbmanager.ArrayOfPlayerStat](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[bbmanager.ArrayOfPlayerStat](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[bbmanager.ArrayOfPlayerStat](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[bbmanager.ArrayOfPlayerStat](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[bbmanager.ArrayOfPlayerStat](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[bbmanager.ArrayOfPlayerStat](_, scalaxb.ElemName(node) :: stack) }) }
    
    def writesChildNodes(__obj: bbmanager.GetLeaguePlayersStatsResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.bestTD map { scalaxb.toXML[bbmanager.ArrayOfPlayerStat](_, targetNamespace, Some("bestTD"), __scope, false) } getOrElse {Nil},
        __obj.bestPasse map { scalaxb.toXML[bbmanager.ArrayOfPlayerStat](_, targetNamespace, Some("bestPasse"), __scope, false) } getOrElse {Nil},
        __obj.bestInterception map { scalaxb.toXML[bbmanager.ArrayOfPlayerStat](_, targetNamespace, Some("bestInterception"), __scope, false) } getOrElse {Nil},
        __obj.bestCatches map { scalaxb.toXML[bbmanager.ArrayOfPlayerStat](_, targetNamespace, Some("bestCatches"), __scope, false) } getOrElse {Nil},
        __obj.bestYardsRun map { scalaxb.toXML[bbmanager.ArrayOfPlayerStat](_, targetNamespace, Some("bestYardsRun"), __scope, false) } getOrElse {Nil},
        __obj.bestYardsPass map { scalaxb.toXML[bbmanager.ArrayOfPlayerStat](_, targetNamespace, Some("bestYardsPass"), __scope, false) } getOrElse {Nil},
        __obj.bestInjuries map { scalaxb.toXML[bbmanager.ArrayOfPlayerStat](_, targetNamespace, Some("bestInjuries"), __scope, false) } getOrElse {Nil},
        __obj.bestViolent map { scalaxb.toXML[bbmanager.ArrayOfPlayerStat](_, targetNamespace, Some("bestViolent"), __scope, false) } getOrElse {Nil},
        __obj.bestKiller map { scalaxb.toXML[bbmanager.ArrayOfPlayerStat](_, targetNamespace, Some("bestKiller"), __scope, false) } getOrElse {Nil},
        __obj.bestPreneurCoup map { scalaxb.toXML[bbmanager.ArrayOfPlayerStat](_, targetNamespace, Some("bestPreneurCoup"), __scope, false) } getOrElse {Nil},
        __obj.bestXP map { scalaxb.toXML[bbmanager.ArrayOfPlayerStat](_, targetNamespace, Some("bestXP"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultBbmanagerGetLeagueTeamsStatsFormat extends scalaxb.ElemNameParser[bbmanager.GetLeagueTeamsStats] {
    val targetNamespace: Option[String] = Some("jcmag22.hd.free.fr/Public")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[bbmanager.GetLeagueTeamsStats] =
      (scalaxb.ElemName(targetNamespace, "leagueId")) ~ 
      (scalaxb.ElemName(targetNamespace, "number")) ^^
      { case p1 ~ p2 =>
      bbmanager.GetLeagueTeamsStats(scalaxb.fromXML[Int](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Int](p2, scalaxb.ElemName(node) :: stack)) }
    
    def writesChildNodes(__obj: bbmanager.GetLeagueTeamsStats, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[Int](__obj.leagueId, targetNamespace, Some("leagueId"), __scope, false),
        scalaxb.toXML[Int](__obj.number, targetNamespace, Some("number"), __scope, false))

  }

  trait DefaultBbmanagerTeamStatFormat extends scalaxb.ElemNameParser[bbmanager.TeamStat] {
    val targetNamespace: Option[String] = Some("jcmag22.hd.free.fr/Public")
    
    override def typeName: Option[String] = Some("TeamStat")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[bbmanager.TeamStat] =
      (scalaxb.ElemName(targetNamespace, "Stat")) ~ 
      opt(scalaxb.ElemName(targetNamespace, "Name")) ~ 
      opt(scalaxb.ElemName(targetNamespace, "CoachName")) ~ 
      (scalaxb.ElemName(targetNamespace, "RaceId")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      bbmanager.TeamStat(scalaxb.fromXML[Long](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[Long](p4, scalaxb.ElemName(node) :: stack)) }
    
    def writesChildNodes(__obj: bbmanager.TeamStat, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[Long](__obj.Stat, targetNamespace, Some("Stat"), __scope, false),
        __obj.Name map { scalaxb.toXML[String](_, targetNamespace, Some("Name"), __scope, false) } getOrElse {Nil},
        __obj.CoachName map { scalaxb.toXML[String](_, targetNamespace, Some("CoachName"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[Long](__obj.RaceId, targetNamespace, Some("RaceId"), __scope, false))

  }

  trait DefaultBbmanagerArrayOfTeamStatFormat extends scalaxb.ElemNameParser[bbmanager.ArrayOfTeamStat] {
    val targetNamespace: Option[String] = Some("jcmag22.hd.free.fr/Public")
    
    override def typeName: Option[String] = Some("ArrayOfTeamStat")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[bbmanager.ArrayOfTeamStat] =
      rep(scalaxb.ElemName(targetNamespace, "TeamStat")) ^^
      { case p1 =>
      bbmanager.ArrayOfTeamStat(p1.toSeq map { _.nilOption map { scalaxb.fromXML[bbmanager.TeamStat](_, scalaxb.ElemName(node) :: stack) }}: _*) }
    
    def writesChildNodes(__obj: bbmanager.ArrayOfTeamStat, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.TeamStat flatMap { scalaxb.toXML[Option[bbmanager.TeamStat]](_, targetNamespace, Some("TeamStat"), __scope, false) })
  }

  trait DefaultBbmanagerGetLeagueTeamsStatsResponseFormat extends scalaxb.ElemNameParser[bbmanager.GetLeagueTeamsStatsResponse] {
    val targetNamespace: Option[String] = Some("jcmag22.hd.free.fr/Public")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[bbmanager.GetLeagueTeamsStatsResponse] =
      opt(scalaxb.ElemName(targetNamespace, "bestTD")) ~ 
      opt(scalaxb.ElemName(targetNamespace, "bestPasse")) ~ 
      opt(scalaxb.ElemName(targetNamespace, "bestInterception")) ~ 
      opt(scalaxb.ElemName(targetNamespace, "bestCatches")) ~ 
      opt(scalaxb.ElemName(targetNamespace, "bestYardsRun")) ~ 
      opt(scalaxb.ElemName(targetNamespace, "bestYardsPass")) ~ 
      opt(scalaxb.ElemName(targetNamespace, "bestInjuries")) ~ 
      opt(scalaxb.ElemName(targetNamespace, "bestViolent")) ~ 
      opt(scalaxb.ElemName(targetNamespace, "bestKiller")) ~ 
      opt(scalaxb.ElemName(targetNamespace, "bestPreneurCoup")) ~ 
      opt(scalaxb.ElemName(targetNamespace, "bestXP")) ~ 
      opt(scalaxb.ElemName(targetNamespace, "bestDefensor")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 =>
      bbmanager.GetLeagueTeamsStatsResponse(p1.headOption map { scalaxb.fromXML[bbmanager.ArrayOfTeamStat](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[bbmanager.ArrayOfTeamStat](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[bbmanager.ArrayOfTeamStat](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[bbmanager.ArrayOfTeamStat](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[bbmanager.ArrayOfTeamStat](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[bbmanager.ArrayOfTeamStat](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[bbmanager.ArrayOfTeamStat](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[bbmanager.ArrayOfTeamStat](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[bbmanager.ArrayOfTeamStat](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[bbmanager.ArrayOfTeamStat](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[bbmanager.ArrayOfTeamStat](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[bbmanager.ArrayOfTeamStat](_, scalaxb.ElemName(node) :: stack) }) }
    
    def writesChildNodes(__obj: bbmanager.GetLeagueTeamsStatsResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.bestTD map { scalaxb.toXML[bbmanager.ArrayOfTeamStat](_, targetNamespace, Some("bestTD"), __scope, false) } getOrElse {Nil},
        __obj.bestPasse map { scalaxb.toXML[bbmanager.ArrayOfTeamStat](_, targetNamespace, Some("bestPasse"), __scope, false) } getOrElse {Nil},
        __obj.bestInterception map { scalaxb.toXML[bbmanager.ArrayOfTeamStat](_, targetNamespace, Some("bestInterception"), __scope, false) } getOrElse {Nil},
        __obj.bestCatches map { scalaxb.toXML[bbmanager.ArrayOfTeamStat](_, targetNamespace, Some("bestCatches"), __scope, false) } getOrElse {Nil},
        __obj.bestYardsRun map { scalaxb.toXML[bbmanager.ArrayOfTeamStat](_, targetNamespace, Some("bestYardsRun"), __scope, false) } getOrElse {Nil},
        __obj.bestYardsPass map { scalaxb.toXML[bbmanager.ArrayOfTeamStat](_, targetNamespace, Some("bestYardsPass"), __scope, false) } getOrElse {Nil},
        __obj.bestInjuries map { scalaxb.toXML[bbmanager.ArrayOfTeamStat](_, targetNamespace, Some("bestInjuries"), __scope, false) } getOrElse {Nil},
        __obj.bestViolent map { scalaxb.toXML[bbmanager.ArrayOfTeamStat](_, targetNamespace, Some("bestViolent"), __scope, false) } getOrElse {Nil},
        __obj.bestKiller map { scalaxb.toXML[bbmanager.ArrayOfTeamStat](_, targetNamespace, Some("bestKiller"), __scope, false) } getOrElse {Nil},
        __obj.bestPreneurCoup map { scalaxb.toXML[bbmanager.ArrayOfTeamStat](_, targetNamespace, Some("bestPreneurCoup"), __scope, false) } getOrElse {Nil},
        __obj.bestXP map { scalaxb.toXML[bbmanager.ArrayOfTeamStat](_, targetNamespace, Some("bestXP"), __scope, false) } getOrElse {Nil},
        __obj.bestDefensor map { scalaxb.toXML[bbmanager.ArrayOfTeamStat](_, targetNamespace, Some("bestDefensor"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultBbmanagerGetNbTeamsPerLeagueFormat extends scalaxb.ElemNameParser[bbmanager.GetNbTeamsPerLeague] {
    val targetNamespace: Option[String] = Some("jcmag22.hd.free.fr/Public")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[bbmanager.GetNbTeamsPerLeague] =
      (scalaxb.ElemName(targetNamespace, "leagueId")) ^^
      { case p1 =>
      bbmanager.GetNbTeamsPerLeague(scalaxb.fromXML[Int](p1, scalaxb.ElemName(node) :: stack)) }
    
    def writesChildNodes(__obj: bbmanager.GetNbTeamsPerLeague, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[Int](__obj.leagueId, targetNamespace, Some("leagueId"), __scope, false))
  }
  trait DefaultBbmanagerGetNbTeamsPerLeagueResponseFormat extends scalaxb.ElemNameParser[bbmanager.GetNbTeamsPerLeagueResponse] {
    val targetNamespace: Option[String] = Some("jcmag22.hd.free.fr/Public")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[bbmanager.GetNbTeamsPerLeagueResponse] =
      (scalaxb.ElemName(targetNamespace, "GetNbTeamsPerLeagueResult")) ^^
      { case p1 =>
      bbmanager.GetNbTeamsPerLeagueResponse(scalaxb.fromXML[Int](p1, scalaxb.ElemName(node) :: stack)) }
    
    def writesChildNodes(__obj: bbmanager.GetNbTeamsPerLeagueResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[Int](__obj.GetNbTeamsPerLeagueResult, targetNamespace, Some("GetNbTeamsPerLeagueResult"), __scope, false))
  }
  trait DefaultBbmanagerGetLeagueIdFormat extends scalaxb.ElemNameParser[bbmanager.GetLeagueId] {
    val targetNamespace: Option[String] = Some("jcmag22.hd.free.fr/Public")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[bbmanager.GetLeagueId] =
      opt(scalaxb.ElemName(targetNamespace, "leagueName")) ^^
      { case p1 =>
      bbmanager.GetLeagueId(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) }
    
    def writesChildNodes(__obj: bbmanager.GetLeagueId, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.leagueName map { scalaxb.toXML[String](_, targetNamespace, Some("leagueName"), __scope, false) } getOrElse {Nil})
  }
  trait DefaultBbmanagerGetLeagueIdResponseFormat extends scalaxb.ElemNameParser[bbmanager.GetLeagueIdResponse] {
    val targetNamespace: Option[String] = Some("jcmag22.hd.free.fr/Public")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[bbmanager.GetLeagueIdResponse] =
      (scalaxb.ElemName(targetNamespace, "GetLeagueIdResult")) ^^
      { case p1 =>
      bbmanager.GetLeagueIdResponse(scalaxb.fromXML[Int](p1, scalaxb.ElemName(node) :: stack)) }
    
    def writesChildNodes(__obj: bbmanager.GetLeagueIdResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[Int](__obj.GetLeagueIdResult, targetNamespace, Some("GetLeagueIdResult"), __scope, false))
  }
  trait DefaultBbmanagerGetLeagueFormat extends scalaxb.ElemNameParser[bbmanager.GetLeague] {
    val targetNamespace: Option[String] = Some("jcmag22.hd.free.fr/Public")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[bbmanager.GetLeague] =
      (scalaxb.ElemName(targetNamespace, "leagueId")) ^^
      { case p1 =>
      bbmanager.GetLeague(scalaxb.fromXML[Int](p1, scalaxb.ElemName(node) :: stack)) }
    
    def writesChildNodes(__obj: bbmanager.GetLeague, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[Int](__obj.leagueId, targetNamespace, Some("leagueId"), __scope, false))
  }
  trait DefaultBbmanagerGetLeagueResponseFormat extends scalaxb.ElemNameParser[bbmanager.GetLeagueResponse] {
    val targetNamespace: Option[String] = Some("jcmag22.hd.free.fr/Public")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[bbmanager.GetLeagueResponse] =
      opt(scalaxb.ElemName(targetNamespace, "GetLeagueResult")) ^^
      { case p1 =>
      bbmanager.GetLeagueResponse(p1.headOption map { scalaxb.fromXML[bbmanager.LeagueEntity](_, scalaxb.ElemName(node) :: stack) }) }
    
    def writesChildNodes(__obj: bbmanager.GetLeagueResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.GetLeagueResult map { scalaxb.toXML[bbmanager.LeagueEntity](_, targetNamespace, Some("GetLeagueResult"), __scope, false) } getOrElse {Nil})
  }
  trait DefaultBbmanagerIsLeagueSupportedFormat extends scalaxb.ElemNameParser[bbmanager.IsLeagueSupported] {
    val targetNamespace: Option[String] = Some("jcmag22.hd.free.fr/Public")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[bbmanager.IsLeagueSupported] =
      (scalaxb.ElemName(targetNamespace, "id")) ^^
      { case p1 =>
      bbmanager.IsLeagueSupported(scalaxb.fromXML[Int](p1, scalaxb.ElemName(node) :: stack)) }
    
    def writesChildNodes(__obj: bbmanager.IsLeagueSupported, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[Int](__obj.id, targetNamespace, Some("id"), __scope, false))
  }
  trait DefaultBbmanagerIsLeagueSupportedResponseFormat extends scalaxb.ElemNameParser[bbmanager.IsLeagueSupportedResponse] {
    val targetNamespace: Option[String] = Some("jcmag22.hd.free.fr/Public")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[bbmanager.IsLeagueSupportedResponse] =
      (scalaxb.ElemName(targetNamespace, "IsLeagueSupportedResult")) ^^
      { case p1 =>
      bbmanager.IsLeagueSupportedResponse(scalaxb.fromXML[Boolean](p1, scalaxb.ElemName(node) :: stack)) }
    
    def writesChildNodes(__obj: bbmanager.IsLeagueSupportedResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[Boolean](__obj.IsLeagueSupportedResult, targetNamespace, Some("IsLeagueSupportedResult"), __scope, false))
  }
  trait DefaultBbmanagerGetMatchsByLeagueFormat extends scalaxb.ElemNameParser[bbmanager.GetMatchsByLeague] {
    val targetNamespace: Option[String] = Some("jcmag22.hd.free.fr/Public")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[bbmanager.GetMatchsByLeague] =
      (scalaxb.ElemName(targetNamespace, "leagueId")) ^^
      { case p1 =>
      bbmanager.GetMatchsByLeague(scalaxb.fromXML[Int](p1, scalaxb.ElemName(node) :: stack)) }
    
    def writesChildNodes(__obj: bbmanager.GetMatchsByLeague, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[Int](__obj.leagueId, targetNamespace, Some("leagueId"), __scope, false))
  }
  trait DefaultBbmanagerLeagueMatchFormat extends scalaxb.ElemNameParser[bbmanager.LeagueMatch] {
    val targetNamespace: Option[String] = Some("jcmag22.hd.free.fr/Public")
    
    override def typeName: Option[String] = Some("LeagueMatch")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[bbmanager.LeagueMatch] =
      (scalaxb.ElemName(targetNamespace, "Id")) ~ 
      opt(scalaxb.ElemName(targetNamespace, "CoachA")) ~ 
      opt(scalaxb.ElemName(targetNamespace, "TeamA")) ~ 
      opt(scalaxb.ElemName(targetNamespace, "RaceA")) ~ 
      (scalaxb.ElemName(targetNamespace, "ScoreA")) ~ 
      opt(scalaxb.ElemName(targetNamespace, "CoachB")) ~ 
      opt(scalaxb.ElemName(targetNamespace, "TeamB")) ~ 
      opt(scalaxb.ElemName(targetNamespace, "RaceB")) ~ 
      (scalaxb.ElemName(targetNamespace, "ScoreB")) ~ 
      (scalaxb.ElemName(targetNamespace, "Day")) ~ 
      (scalaxb.ElemName(targetNamespace, "TVA")) ~ 
      (scalaxb.ElemName(targetNamespace, "TVB")) ~ 
      (scalaxb.ElemName(targetNamespace, "Date")) ~ 
      (scalaxb.ElemName(targetNamespace, "RaceIdA")) ~ 
      (scalaxb.ElemName(targetNamespace, "RaceIdB")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 =>
      bbmanager.LeagueMatch(scalaxb.fromXML[Int](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.nilOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p9.nilOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p10.nilOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p11.nilOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) },
        p12.nilOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p13, scalaxb.ElemName(node) :: stack),
        p14.nilOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p15.nilOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) }) }
    
    def writesChildNodes(__obj: bbmanager.LeagueMatch, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[Int](__obj.Id, targetNamespace, Some("Id"), __scope, false),
        __obj.CoachA map { scalaxb.toXML[String](_, targetNamespace, Some("CoachA"), __scope, false) } getOrElse {Nil},
        __obj.TeamA map { scalaxb.toXML[String](_, targetNamespace, Some("TeamA"), __scope, false) } getOrElse {Nil},
        __obj.RaceA map { scalaxb.toXML[String](_, targetNamespace, Some("RaceA"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[Option[Int]](__obj.ScoreA, targetNamespace, Some("ScoreA"), __scope, false),
        __obj.CoachB map { scalaxb.toXML[String](_, targetNamespace, Some("CoachB"), __scope, false) } getOrElse {Nil},
        __obj.TeamB map { scalaxb.toXML[String](_, targetNamespace, Some("TeamB"), __scope, false) } getOrElse {Nil},
        __obj.RaceB map { scalaxb.toXML[String](_, targetNamespace, Some("RaceB"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[Option[Int]](__obj.ScoreB, targetNamespace, Some("ScoreB"), __scope, false),
        scalaxb.toXML[Option[Int]](__obj.Day, targetNamespace, Some("Day"), __scope, false),
        scalaxb.toXML[Option[Long]](__obj.TVA, targetNamespace, Some("TVA"), __scope, false),
        scalaxb.toXML[Option[Long]](__obj.TVB, targetNamespace, Some("TVB"), __scope, false),
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.Date, targetNamespace, Some("Date"), __scope, false),
        scalaxb.toXML[Option[Int]](__obj.RaceIdA, targetNamespace, Some("RaceIdA"), __scope, false),
        scalaxb.toXML[Option[Int]](__obj.RaceIdB, targetNamespace, Some("RaceIdB"), __scope, false))

  }

  trait DefaultBbmanagerArrayOfLeagueMatchFormat extends scalaxb.ElemNameParser[bbmanager.ArrayOfLeagueMatch] {
    val targetNamespace: Option[String] = Some("jcmag22.hd.free.fr/Public")
    
    override def typeName: Option[String] = Some("ArrayOfLeagueMatch")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[bbmanager.ArrayOfLeagueMatch] =
      rep(scalaxb.ElemName(targetNamespace, "LeagueMatch")) ^^
      { case p1 =>
      bbmanager.ArrayOfLeagueMatch(p1.toSeq map { _.nilOption map { scalaxb.fromXML[bbmanager.LeagueMatch](_, scalaxb.ElemName(node) :: stack) }}: _*) }
    
    def writesChildNodes(__obj: bbmanager.ArrayOfLeagueMatch, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.LeagueMatch flatMap { scalaxb.toXML[Option[bbmanager.LeagueMatch]](_, targetNamespace, Some("LeagueMatch"), __scope, false) })
  }

  trait DefaultBbmanagerGetMatchsByLeagueResponseFormat extends scalaxb.ElemNameParser[bbmanager.GetMatchsByLeagueResponse] {
    val targetNamespace: Option[String] = Some("jcmag22.hd.free.fr/Public")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[bbmanager.GetMatchsByLeagueResponse] =
      opt(scalaxb.ElemName(targetNamespace, "GetMatchsByLeagueResult")) ^^
      { case p1 =>
      bbmanager.GetMatchsByLeagueResponse(p1.headOption map { scalaxb.fromXML[bbmanager.ArrayOfLeagueMatch](_, scalaxb.ElemName(node) :: stack) }) }
    
    def writesChildNodes(__obj: bbmanager.GetMatchsByLeagueResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.GetMatchsByLeagueResult map { scalaxb.toXML[bbmanager.ArrayOfLeagueMatch](_, targetNamespace, Some("GetMatchsByLeagueResult"), __scope, false) } getOrElse {Nil})
  }
  trait DefaultBbmanagerGetELORankingFormat extends scalaxb.ElemNameParser[bbmanager.GetELORanking] {
    val targetNamespace: Option[String] = Some("jcmag22.hd.free.fr/Public")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[bbmanager.GetELORanking] =
      (scalaxb.ElemName(targetNamespace, "id")) ^^
      { case p1 =>
      bbmanager.GetELORanking(scalaxb.fromXML[Int](p1, scalaxb.ElemName(node) :: stack)) }
    
    def writesChildNodes(__obj: bbmanager.GetELORanking, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[Int](__obj.id, targetNamespace, Some("id"), __scope, false))
  }
  trait DefaultBbmanagerEloRankingFormat extends scalaxb.ElemNameParser[bbmanager.EloRanking] {
    val targetNamespace: Option[String] = Some("jcmag22.hd.free.fr/Public")
    
    override def typeName: Option[String] = Some("EloRanking")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[bbmanager.EloRanking] =
      opt(scalaxb.ElemName(targetNamespace, "Coach")) ~ 
      (scalaxb.ElemName(targetNamespace, "Score")) ~ 
      (scalaxb.ElemName(targetNamespace, "NbMatchs")) ~ 
      (scalaxb.ElemName(targetNamespace, "Rank")) ~ 
      (scalaxb.ElemName(targetNamespace, "V")) ~ 
      (scalaxb.ElemName(targetNamespace, "N")) ~ 
      (scalaxb.ElemName(targetNamespace, "D")) ~ 
      (scalaxb.ElemName(targetNamespace, "LastEvolution")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 =>
      bbmanager.EloRanking(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[Double](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Int](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Int](p4, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Int](p5, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Int](p6, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Int](p7, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Double](p8, scalaxb.ElemName(node) :: stack)) }
    
    def writesChildNodes(__obj: bbmanager.EloRanking, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Coach map { scalaxb.toXML[String](_, targetNamespace, Some("Coach"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[Double](__obj.Score, targetNamespace, Some("Score"), __scope, false),
        scalaxb.toXML[Int](__obj.NbMatchs, targetNamespace, Some("NbMatchs"), __scope, false),
        scalaxb.toXML[Int](__obj.Rank, targetNamespace, Some("Rank"), __scope, false),
        scalaxb.toXML[Int](__obj.V, targetNamespace, Some("V"), __scope, false),
        scalaxb.toXML[Int](__obj.N, targetNamespace, Some("N"), __scope, false),
        scalaxb.toXML[Int](__obj.D, targetNamespace, Some("D"), __scope, false),
        scalaxb.toXML[Double](__obj.LastEvolution, targetNamespace, Some("LastEvolution"), __scope, false))

  }

  trait DefaultBbmanagerArrayOfEloRankingFormat extends scalaxb.ElemNameParser[bbmanager.ArrayOfEloRanking] {
    val targetNamespace: Option[String] = Some("jcmag22.hd.free.fr/Public")
    
    override def typeName: Option[String] = Some("ArrayOfEloRanking")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[bbmanager.ArrayOfEloRanking] =
      rep(scalaxb.ElemName(targetNamespace, "EloRanking")) ^^
      { case p1 =>
      bbmanager.ArrayOfEloRanking(p1.toSeq map { _.nilOption map { scalaxb.fromXML[bbmanager.EloRanking](_, scalaxb.ElemName(node) :: stack) }}: _*) }
    
    def writesChildNodes(__obj: bbmanager.ArrayOfEloRanking, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.EloRanking flatMap { scalaxb.toXML[Option[bbmanager.EloRanking]](_, targetNamespace, Some("EloRanking"), __scope, false) })
  }

  trait DefaultBbmanagerGetELORankingResponseFormat extends scalaxb.ElemNameParser[bbmanager.GetELORankingResponse] {
    val targetNamespace: Option[String] = Some("jcmag22.hd.free.fr/Public")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[bbmanager.GetELORankingResponse] =
      opt(scalaxb.ElemName(targetNamespace, "GetELORankingResult")) ^^
      { case p1 =>
      bbmanager.GetELORankingResponse(p1.headOption map { scalaxb.fromXML[bbmanager.ArrayOfEloRanking](_, scalaxb.ElemName(node) :: stack) }) }
    
    def writesChildNodes(__obj: bbmanager.GetELORankingResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.GetELORankingResult map { scalaxb.toXML[bbmanager.ArrayOfEloRanking](_, targetNamespace, Some("GetELORankingResult"), __scope, false) } getOrElse {Nil})
  }

  trait PublicServiceSoap12Bindings { this: scalaxb.SoapClients =>
    lazy val targetNamespace: Option[String] = Some("jcmag22.hd.free.fr/Public")
    lazy val service: PublicServiceSoap = new PublicServiceSoap12Binding {}
    lazy val baseAddress = new java.net.URI("http://94.23.239.117/BloodBowlManager.WebService.Public/PublicService.asmx")

    trait PublicServiceSoap12Binding extends PublicServiceSoap {
      def getAllLeagues(): Either[scalaxb.Fault[Any], Option[bbmanager.ArrayOfLeagueEntity]] = 
        soapClient.requestResponse(scalaxb.toXML(GetAllLeagues(), targetNamespace, "GetAllLeagues", defaultScope), defaultScope, baseAddress, "POST", Some(new java.net.URI("jcmag22.hd.free.fr/Public/GetAllLeagues"))) match {
          case Left(x)  => Left(x)
          case Right(x) => Right(scalaxb.fromXML[GetAllLeaguesResponse](x).GetAllLeaguesResult)
        }
      def getTeamsInLeague(leagueId: Int): Either[scalaxb.Fault[Any], Option[bbmanager.ArrayOfString]] = 
        soapClient.requestResponse(scalaxb.toXML(GetTeamsInLeague(leagueId), targetNamespace, "GetTeamsInLeague", defaultScope), defaultScope, baseAddress, "POST", Some(new java.net.URI("jcmag22.hd.free.fr/Public/GetTeamsInLeague"))) match {
          case Left(x)  => Left(x)
          case Right(x) => Right(scalaxb.fromXML[GetTeamsInLeagueResponse](x).GetTeamsInLeagueResult)
        }
      def getLeaguePlayers(leagueId: Int): Either[scalaxb.Fault[Any], GetLeaguePlayersResponse] = 
        soapClient.requestResponse(scalaxb.toXML(GetLeaguePlayers(leagueId), targetNamespace, "GetLeaguePlayers", defaultScope), defaultScope, baseAddress, "POST", Some(new java.net.URI("jcmag22.hd.free.fr/Public/GetLeaguePlayers"))) match {
          case Left(x)  => Left(x)
          case Right(x) => Right(scalaxb.fromXML[GetLeaguePlayersResponse](x))
        }
      def getPlayersInLeague(leagueId: Int): Either[scalaxb.Fault[Any], Option[bbmanager.ArrayOfPlayerEntity]] = 
        soapClient.requestResponse(scalaxb.toXML(GetPlayersInLeague(leagueId), targetNamespace, "GetPlayersInLeague", defaultScope), defaultScope, baseAddress, "POST", Some(new java.net.URI("jcmag22.hd.free.fr/Public/GetPlayersInLeague"))) match {
          case Left(x)  => Left(x)
          case Right(x) => Right(scalaxb.fromXML[GetPlayersInLeagueResponse](x).GetPlayersInLeagueResult)
        }
      def getReplayData(matchId: Int): Either[scalaxb.Fault[Any], GetReplayDataResponse] = 
        soapClient.requestResponse(scalaxb.toXML(GetReplayData(matchId), targetNamespace, "GetReplayData", defaultScope), defaultScope, baseAddress, "POST", Some(new java.net.URI("jcmag22.hd.free.fr/Public/GetReplayData"))) match {
          case Left(x)  => Left(x)
          case Right(x) => Right(scalaxb.fromXML[GetReplayDataResponse](x))
        }
      def getTeamPlayers(leagueId: Int, teamName: Option[String], language: Option[String]): Either[scalaxb.Fault[Any], GetTeamPlayersResponse] = 
        soapClient.requestResponse(scalaxb.toXML(GetTeamPlayers(leagueId, teamName, language), targetNamespace, "GetTeamPlayers", defaultScope), defaultScope, baseAddress, "POST", Some(new java.net.URI("jcmag22.hd.free.fr/Public/GetTeamPlayers"))) match {
          case Left(x)  => Left(x)
          case Right(x) => Right(scalaxb.fromXML[GetTeamPlayersResponse](x))
        }
      def getTeamsListing(matchId: Int): Either[scalaxb.Fault[Any], GetTeamsListingResponse] = 
        soapClient.requestResponse(scalaxb.toXML(GetTeamsListing(matchId), targetNamespace, "GetTeamsListing", defaultScope), defaultScope, baseAddress, "POST", Some(new java.net.URI("jcmag22.hd.free.fr/Public/GetTeamsListing"))) match {
          case Left(x)  => Left(x)
          case Right(x) => Right(scalaxb.fromXML[GetTeamsListingResponse](x))
        }
      def getLeaguePlayersStats(leagueId: Int, number: Int): Either[scalaxb.Fault[Any], GetLeaguePlayersStatsResponse] = 
        soapClient.requestResponse(scalaxb.toXML(GetLeaguePlayersStats(leagueId, number), targetNamespace, "GetLeaguePlayersStats", defaultScope), defaultScope, baseAddress, "POST", Some(new java.net.URI("jcmag22.hd.free.fr/Public/GetLeaguePlayersStats"))) match {
          case Left(x)  => Left(x)
          case Right(x) => Right(scalaxb.fromXML[GetLeaguePlayersStatsResponse](x))
        }
      def getLeagueTeamsStats(leagueId: Int, number: Int): Either[scalaxb.Fault[Any], GetLeagueTeamsStatsResponse] = 
        soapClient.requestResponse(scalaxb.toXML(GetLeagueTeamsStats(leagueId, number), targetNamespace, "GetLeagueTeamsStats", defaultScope), defaultScope, baseAddress, "POST", Some(new java.net.URI("jcmag22.hd.free.fr/Public/GetLeagueTeamsStats"))) match {
          case Left(x)  => Left(x)
          case Right(x) => Right(scalaxb.fromXML[GetLeagueTeamsStatsResponse](x))
        }
      def getNbTeamsPerLeague(leagueId: Int): Either[scalaxb.Fault[Any], Int] = 
        soapClient.requestResponse(scalaxb.toXML(GetNbTeamsPerLeague(leagueId), targetNamespace, "GetNbTeamsPerLeague", defaultScope), defaultScope, baseAddress, "POST", Some(new java.net.URI("jcmag22.hd.free.fr/Public/GetNbTeamsPerLeague"))) match {
          case Left(x)  => Left(x)
          case Right(x) => Right(scalaxb.fromXML[GetNbTeamsPerLeagueResponse](x).GetNbTeamsPerLeagueResult)
        }
      def getLeagueId(leagueName: Option[String]): Either[scalaxb.Fault[Any], Int] = 
        soapClient.requestResponse(scalaxb.toXML(GetLeagueId(leagueName), targetNamespace, "GetLeagueId", defaultScope), defaultScope, baseAddress, "POST", Some(new java.net.URI("jcmag22.hd.free.fr/Public/GetLeagueId"))) match {
          case Left(x)  => Left(x)
          case Right(x) => Right(scalaxb.fromXML[GetLeagueIdResponse](x).GetLeagueIdResult)
        }
      def getLeague(leagueId: Int): Either[scalaxb.Fault[Any], Option[bbmanager.LeagueEntity]] = 
        soapClient.requestResponse(scalaxb.toXML(GetLeague(leagueId), targetNamespace, "GetLeague", defaultScope), defaultScope, baseAddress, "POST", Some(new java.net.URI("jcmag22.hd.free.fr/Public/GetLeague"))) match {
          case Left(x)  => Left(x)
          case Right(x) => Right(scalaxb.fromXML[GetLeagueResponse](x).GetLeagueResult)
        }
      def isLeagueSupported(id: Int): Either[scalaxb.Fault[Any], Boolean] = 
        soapClient.requestResponse(scalaxb.toXML(IsLeagueSupported(id), targetNamespace, "IsLeagueSupported", defaultScope), defaultScope, baseAddress, "POST", Some(new java.net.URI("jcmag22.hd.free.fr/Public/IsLeagueSupported"))) match {
          case Left(x)  => Left(x)
          case Right(x) => Right(scalaxb.fromXML[IsLeagueSupportedResponse](x).IsLeagueSupportedResult)
        }
      def getMatchsByLeague(leagueId: Int): Either[scalaxb.Fault[Any], Option[bbmanager.ArrayOfLeagueMatch]] = 
        soapClient.requestResponse(scalaxb.toXML(GetMatchsByLeague(leagueId), targetNamespace, "GetMatchsByLeague", defaultScope), defaultScope, baseAddress, "POST", Some(new java.net.URI("jcmag22.hd.free.fr/Public/GetMatchsByLeague"))) match {
          case Left(x)  => Left(x)
          case Right(x) => Right(scalaxb.fromXML[GetMatchsByLeagueResponse](x).GetMatchsByLeagueResult)
        }
      def getELORanking(id: Int): Either[scalaxb.Fault[Any], Option[bbmanager.ArrayOfEloRanking]] = 
        soapClient.requestResponse(scalaxb.toXML(GetELORanking(id), targetNamespace, "GetELORanking", defaultScope), defaultScope, baseAddress, "POST", Some(new java.net.URI("jcmag22.hd.free.fr/Public/GetELORanking"))) match {
          case Left(x)  => Left(x)
          case Right(x) => Right(scalaxb.fromXML[GetELORankingResponse](x).GetELORankingResult)
        }
    }
  }



}

